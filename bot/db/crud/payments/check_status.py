import aiosqlite
from bot.db.crud.user import get_user, get_all_admins
from ..bike import get_bike_by_id

from cardlink._types import Bill, BillStatus
from cardlink.client import CardLink

from aiogram import Bot

from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from bot.config import cl

from .config import DB_PATH, t

import aiosqlite
from datetime import datetime


from ..rent_data import add_rent_data


# async def check_payments(bot: Bot) -> None:
#     async with aiosqlite.connect(DB_PATH) as conn:
#         cursor = await conn.cursor()
#
#         await cursor.execute(f'''
#             SELECT id, bill_id, user_id, amount, currency, days, created_at
#             FROM {t}
#             WHERE status = 'pending'
#             AND (updated_at IS NULL OR julianday('now') - julianday(updated_at) > ?)
#             LIMIT 10
#         ''', (1 / 1440,))  # 1 –º–∏–Ω—É—Ç–∞
#
#         pending_payments = await cursor.fetchall()
#
#         for payment in pending_payments:
#             payment_id, bill_id, user_id, amount, currency, days, created_at = payment
#
#             try:
#                 # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
#                 created_dt = datetime.fromisoformat(created_at) if isinstance(created_at, str) else created_at
#                 time_diff = (datetime.now() - created_dt).total_seconds() / 60
#
#                 if time_diff > 15:
#                     # ‚ùå –í–†–ï–ú–Ø –í–´–®–õ–û - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π
#                     await cursor.execute(f'''
#                         UPDATE {t}
#                         SET status = 'expired',
#                             updated_at = ?
#                         WHERE id = ?
#                     ''', (datetime.now(), payment_id))
#
#                     keyboard = InlineKeyboardMarkup(inline_keyboard=[
#                         [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
#                     ])
#
#                     await bot.send_message(user_id,
#                                            "‚ùå <b>–í–†–ï–ú–Ø –û–ü–õ–ê–¢–´ –ò–°–¢–ï–ö–õ–û</b>\n\n"
#                                            "‚è∞ –í—ã –Ω–µ —É—Å–ø–µ–ª–∏ –æ–ø–ª–∞—Ç–∏—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.\n\n"
#                                            "üí° –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã:",
#                                            parse_mode='HTML', reply_markup=keyboard
#                                            )
#                     continue
#
#                 # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —É –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
#                 try:
#                     user = await get_user(user_id)
#                     bill: Bill = await cl.get_bill_status(id=bill_id)
#
#                     if bill.status == BillStatus.success:
#                         # ‚úÖ –ü–õ–ê–¢–ï–ñ –£–°–ü–ï–®–ï–ù
#                         await cursor.execute(f'''
#                             UPDATE {t}
#                             SET status = 'success',
#                                 updated_at = ?,
#                                 commission = ?
#                             WHERE id = ?
#                         ''', (datetime.now(), getattr(bill, 'commission', 0), payment_id))
#
#                         keyboard = InlineKeyboardMarkup(inline_keyboard=[
#                             [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
#                         ])
#
#                         await bot.send_message(user_id,
#                                                "üéâ <b>–û–ü–õ–ê–¢–ê –ü–†–û–®–õ–ê –£–°–ü–ï–®–ù–û!</b>\n\n",
#                                                parse_mode='HTML', reply_markup=keyboard
#                                                )
#
#                         await add_rent_data(user[1], user[3], days=days)
#
#                     elif bill.status == BillStatus.expired:
#                         # ‚ùå –ü–õ–ê–¢–ï–ñ –ü–†–û–°–†–û–ß–ï–ù
#                         await cursor.execute(f'''
#                             UPDATE {t}
#                             SET status = 'expired',
#                                 updated_at = ?
#                             WHERE id = ?
#                         ''', (datetime.now(), payment_id))
#
#                         keyboard = InlineKeyboardMarkup(inline_keyboard=[
#                             [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main")]
#                         ])
#
#                         await bot.send_message(user_id,
#                                                "‚ùå <b>–ü–õ–ê–¢–ï–ñ –ü–†–û–°–†–û–ß–ï–ù</b>\n\n",
#                                                parse_mode='HTML', reply_markup=keyboard
#                                                )
#
#                     else:
#                         # üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏
#                         await cursor.execute(f'''
#                             UPDATE {t}
#                             SET updated_at = ?
#                             WHERE id = ?
#                         ''', (datetime.now(), payment_id))
#
#                 except Exception as bill_error:
#                     # üö® –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –û–®–ò–ë–ö–ò
#                     error_message = str(bill_error)
#                     error_type = type(bill_error).__name__
#
#                     print(f"üîç –î–ï–¢–ê–õ–ò –û–®–ò–ë–ö–ò –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ {payment_id}:")
#                     print(f"–¢–∏–ø: {error_type}")
#                     print(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {error_message}")
#                     print(f"Bill ID: {bill_id}")
#                     print(f"User ID: {user_id}")
#
#                     # –í–†–ï–ú–ï–ù–ù–û: —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º, –Ω–æ –ù–ï –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ expired
#                     print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API, –Ω–æ –ø–ª–∞—Ç–µ–∂ #{payment_id} –æ—Å—Ç–∞–µ—Ç—Å—è –≤ pending")
#
#                     # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏
#                     await cursor.execute(f'''
#                         UPDATE {t}
#                         SET updated_at = ?
#                         WHERE id = ?
#                     ''', (datetime.now(), payment_id))
#
#             except Exception as e:
#                 print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {e}")
#                 await cursor.execute(f'''
#                     UPDATE {t}
#                     SET updated_at = ?
#                     WHERE id = ?
#                 ''', (datetime.now(), payment_id))
#
#         await conn.commit()

async def check_payments(bot: Bot) -> None:


    async with aiosqlite.connect(DB_PATH) as conn:
        cursor = await conn.cursor()

        await cursor.execute(f'''
            SELECT id, bill_id, user_id, amount, currency, days, created_at, message_id
            FROM {t}
            WHERE status = 'pending'
            LIMIT 10
        ''')

        pending_payments = await cursor.fetchall()

        for payment in pending_payments:
            payment_id, bill_id, user_id, amount, currency, days, created_at, message_id = payment


            if isinstance(created_at, str):
                try:
                    created_dt = datetime.fromisoformat(created_at)
                except ValueError:

                    created_dt = datetime.now()
            else:
                created_dt = created_at

            time_diff = (datetime.now() - created_dt).total_seconds() / 60


            if time_diff > 1:
                await cursor.execute(f'''
                    UPDATE {t}
                    SET status = 'expired',
                        updated_at = ?
                    WHERE id = ?
                ''', (datetime.now().isoformat(), payment_id))

                # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—á—ë—Ç–æ–º
                if message_id:
                    try:
                        await bot.delete_message(chat_id=user_id, message_id=message_id)
                    except:
                        pass

                keyboard = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                        ],
                        [
                            InlineKeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="profile")
                        ]
                    ]
                )
                await bot.send_message(
                    user_id,
                    "‚ùå <b>–í–†–ï–ú–Ø –û–ü–õ–ê–¢–´ –ò–°–¢–ï–ö–õ–û</b>\n\n"
                    "‚è∞ –í—ã –Ω–µ —É—Å–ø–µ–ª–∏ –æ–ø–ª–∞—Ç–∏—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.\n\n"
                    "üí° –í—ã –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –∑–∞–Ω–æ–≤–æ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ",
                    parse_mode='HTML',
                    reply_markup=keyboard
                )
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —É –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
            try:
                user = await get_user(user_id)
                bill: Bill = await cl.get_bill_status(id=bill_id)
            except Exception as e:
                # –û–±–Ω–æ–≤–ª—è–µ–º updated_at –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
                await cursor.execute(f'''
                    UPDATE {t}
                    SET updated_at = ?
                    WHERE id = ?
                ''', (datetime.now().isoformat(), payment_id))
                continue

            if bill.status == BillStatus.success:
                await cursor.execute(f'''
                    UPDATE {t}
                    SET status = 'success',
                        updated_at = ?,
                        commission = ?
                    WHERE id = ?
                ''', (datetime.now().isoformat(), getattr(bill, 'commission', 0), payment_id))

                keyboard = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                        ],
                        [
                            InlineKeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="profile")
                        ]
                    ]
                )
                await bot.send_message(
                    user_id,
                    f"üéâ <b>–û–ü–õ–ê–¢–ê –ü–†–û–®–õ–ê –£–°–ü–ï–®–ù–û!</b>\n\n"
                    f"‚úÖ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∞—Ä–µ–Ω–¥–æ–π –µ—â—ë <b>{days} –¥–Ω–µ–π</b>.",
                    parse_mode='HTML',
                    reply_markup=keyboard
                )

                await add_rent_data(user[1], user[3], days=days)

            elif bill.status == BillStatus.fail:
                await cursor.execute(f'''
                    UPDATE {t}
                    SET status = 'fail',
                        updated_at = ?
                    WHERE id = ?
                ''', (datetime.now().isoformat(), payment_id))

                keyboard = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                        ],
                        [
                            InlineKeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="profile")
                        ]
                    ]
                )

                await bot.send_message(
                    user_id,
                    (
                        "‚ùå <b>–û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞</b>\n\n"
                        "–í–æ–∑–º–æ–∂–Ω–æ, –Ω–∞ –∫–∞—Ä—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ.\n\n"
                        "üí° <b>–ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å?</b>\n"
                        "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å —Å–Ω–æ–≤–∞\n"
                        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –∏–ª–∏ –∫–∞—Ä—Ç—É\n\n"
                        "üîë –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ <b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b>, —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É."
                    ),
                    parse_mode="HTML", reply_markup=keyboard
                ),

                admins = await get_all_admins()

                bike = await get_bike_by_id(user[3])
                bike_id, bike_type = bike[1], bike[2]

                for admin in admins:
                    await bot.send_message(
                        admin[1],
                        (
                            "‚ö†Ô∏è <b>–ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã</b>\n\n"
                            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{user[1]}</code>\n"
                            f"üõµ –°–∫—É—Ç–µ—Ä: <b>{bike_type}</b> (ID: <code>{bike_id}</code>)\n"
                            f"‚è≥ –ê—Ä–µ–Ω–¥–∞ –Ω–∞: <b>{days} –¥–Ω–µ–π</b>\n"
                            f"üí∞ –°—É–º–º–∞: <b>{amount} ‚ÇΩ</b>\n\n"
                            "üí° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã."
                        ),
                        parse_mode="HTML"
                    )

            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                await cursor.execute(f'''
                    UPDATE {t}
                    SET updated_at = ?
                    WHERE id = ?
                ''', (datetime.now().isoformat(), payment_id))

        await conn.commit()




