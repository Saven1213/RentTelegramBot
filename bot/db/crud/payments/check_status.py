import aiosqlite
from bot.db.crud.user import get_user, get_all_admins
from ..bike import get_bike_by_id

import json

from cardlink._types import Bill, BillStatus
from cardlink.client import CardLink

from aiogram import Bot

from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from bot.config import cl

from .config import DB_PATH, t

import aiosqlite
from datetime import datetime


from ..rent_data import add_rent_data




async def check_payments(bot: Bot) -> None:
    admins = await get_all_admins()
    async with aiosqlite.connect(DB_PATH) as conn:
        cursor = await conn.cursor()

        await cursor.execute(f'''
            SELECT id, bill_id, user_id, amount, currency, days, created_at, message_id
            FROM {t}
            WHERE status = 'pending'
            LIMIT 10
        ''')

        pending_payments = await cursor.fetchall()

        for payment in pending_payments:
            payment_id, bill_id, user_id, amount, currency, days, created_at, message_id = payment


            await cursor.execute("""
            SELECT username
            FROM users
            WHERE tg_id = ?
            """, (user_id, ))

            user = await cursor.fetchone()




            bill: Bill = await cl.get_bill_status(id=bill_id)

            user_keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main")
                    ],
                    [
                        InlineKeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="profile")
                    ]
                ]
            )
            admin_keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main")
                    ]
                ]
            )

            if bill.status is not None and bill.active is False:
                await cursor.execute(f'''
                    UPDATE {t}
                    SET status = 'expired',
                        updated_at = ?
                    WHERE id = ?
                ''', (datetime.now().isoformat(), payment_id))

                if message_id:
                    try:
                        parsed = json.loads(message_id)
                    except (json.JSONDecodeError, TypeError):
                        parsed = message_id

                    if isinstance(parsed, dict):
                        for role_name, role_dict in parsed.items():
                            for chat_id, msg_id in role_dict.items():
                                try:

                                    await bot.delete_message(chat_id=int(chat_id), message_id=int(msg_id))


                                    if role_name == 'admin':
                                        await bot.send_message(
                                            chat_id=int(chat_id),
                                            text=(
                                                "‚ùå <b>–°–ß–Å–¢ –ü–†–û–°–†–û–ß–ï–ù</b>\n\n"
                                                f"‚è∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user[0]} –Ω–µ –æ–ø–ª–∞—Ç–∏–ª –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç."
                                            ),
                                            reply_markup=admin_keyboard,
                                            parse_mode="HTML"
                                        )
                                    else:
                                        await bot.send_message(
                                            chat_id=int(chat_id),
                                            text=(
                                                "‚ùå <b>–í–†–ï–ú–Ø –û–ü–õ–ê–¢–´ –ò–°–¢–ï–ö–õ–û</b>\n\n"
                                                "‚è∞ –í—ã –Ω–µ —É—Å–ø–µ–ª–∏ –æ–ø–ª–∞—Ç–∏—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.\n\n"
                                                "üí° –í—ã –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –∑–∞–Ω–æ–≤–æ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ"
                                            ),
                                            parse_mode="HTML",
                                            reply_markup=user_keyboard
                                        )
                                except Exception as e:
                                    print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {chat_id=} {msg_id=}: {e}")
                    else:
                        try:
                            await bot.delete_message(chat_id=int(user_id), message_id=int(parsed))
                            await bot.send_message(
                                chat_id=int(user_id),
                                text=(
                                    "‚ùå <b>–í–†–ï–ú–Ø –û–ü–õ–ê–¢–´ –ò–°–¢–ï–ö–õ–û</b>\n\n"
                                    "‚è∞ –í—ã –Ω–µ —É—Å–ø–µ–ª–∏ –æ–ø–ª–∞—Ç–∏—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.\n\n"
                                    "üí° –í—ã –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –∑–∞–Ω–æ–≤–æ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ"
                                ),
                                parse_mode="HTML", reply_markup=user_keyboard
                            )
                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {user_id=} {parsed=}: {e}")

                    continue


            try:
                user = await get_user(user_id)

            except Exception as e:

                await cursor.execute(f'''
                    UPDATE {t}
                    SET updated_at = ?
                    WHERE id = ?
                ''', (datetime.now().isoformat(), payment_id))
                continue

            if bill.status == BillStatus.success:
                await cursor.execute(f'''
                    UPDATE {t}
                    SET status = 'success',
                        updated_at = ?,
                        commission = ?
                    WHERE id = ?
                ''', (datetime.now().isoformat(), getattr(bill, 'commission', 0), payment_id))


                await bot.send_message(
                    user_id,
                    f"üéâ <b>–û–ü–õ–ê–¢–ê –ü–†–û–®–õ–ê –£–°–ü–ï–®–ù–û!</b>\n\n"
                    f"‚úÖ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∞—Ä–µ–Ω–¥–æ–π –µ—â—ë <b>{days} –¥–Ω–µ–π</b>.",
                    parse_mode='HTML',
                    reply_markup=user_keyboard
                )

                await add_rent_data(user[1], user[3], days=days)

            elif bill.status == BillStatus.fail:
                await cursor.execute(f'''
                    UPDATE {t}
                    SET status = 'fail',
                        updated_at = ?
                    WHERE id = ?
                ''', (datetime.now().isoformat(), payment_id))



                await bot.send_message(
                    user_id,
                    (
                        "‚ùå <b>–û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞</b>\n\n"
                        "–í–æ–∑–º–æ–∂–Ω–æ, –Ω–∞ –∫–∞—Ä—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ.\n\n"
                        "üí° <b>–ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å?</b>\n"
                        "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å —Å–Ω–æ–≤–∞\n"
                        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –∏–ª–∏ –∫–∞—Ä—Ç—É\n\n"
                        "üîë –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ <b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b>, —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É."
                    ),
                    parse_mode="HTML", reply_markup=user_keyboard
                ),



                bike = await get_bike_by_id(user[3])
                bike_id, bike_type = bike[1], bike[2]

                for admin in admins:
                    await bot.send_message(
                        admin[1],
                        (
                            "‚ö†Ô∏è <b>–ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã</b>\n\n"
                            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{user[1]}</code>\n"
                            f"üõµ –°–∫—É—Ç–µ—Ä: <b>{bike_type}</b> (ID: <code>{bike_id}</code>)\n"
                            f"‚è≥ –ê—Ä–µ–Ω–¥–∞ –Ω–∞: <b>{days} –¥–Ω–µ–π</b>\n"
                            f"üí∞ –°—É–º–º–∞: <b>{amount} ‚ÇΩ</b>\n\n"
                            "üí° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã."
                        ),
                        parse_mode="HTML",
                        reply_markup=admin_keyboard
                    )

            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                await cursor.execute(f'''
                    UPDATE {t}
                    SET updated_at = ?
                    WHERE id = ?
                ''', (datetime.now().isoformat(), payment_id))

        await conn.commit()

# async def check_payments(bot: Bot) -> None:
#     admins = await get_all_admins()
#     async with aiosqlite.connect(DB_PATH) as conn:
#         cursor = await conn.cursor()
#
#         await cursor.execute(f'''
#             SELECT id, bill_id, user_id, amount, currency, days, created_at, message_id
#             FROM {t}
#             WHERE status = 'pending'
#             LIMIT 10
#         ''')
#         pending_payments = await cursor.fetchall()
#
#         for payment in pending_payments:
#             payment_id, bill_id, user_id, amount, currency, days, created_at, message_id = payment
#
#             # –ü–æ–ª—É—á–∞–µ–º username (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π)
#             await cursor.execute("""
#                 SELECT username
#                 FROM users
#                 WHERE tg_id = ?
#             """, (user_id,))
#             uname_row = await cursor.fetchone()
#             username = uname_row[0] if uname_row else None
#
#             # –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
#             user_keyboard = InlineKeyboardMarkup(
#                 inline_keyboard=[
#                     [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main")],
#                     [InlineKeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="profile")]
#                 ]
#             )
#             admin_keyboard = InlineKeyboardMarkup(
#                 inline_keyboard=[
#                     [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main")]
#                 ]
#             )
#
#             # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Å—Ç–∞—Ç—É—Å —Å—á–µ—Ç–∞ —É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
#             try:
#                 user_tuple = await get_user(user_id)  # –º–æ–∂–µ—Ç –±—ã—Ç—å None
#                 bill: Bill = await cl.get_bill_status(id=bill_id)
#             except Exception as e:
#                 # –µ—Å–ª–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∏–¥—ë–º –¥–∞–ª—å—à–µ
#                 await cursor.execute(f'''
#                     UPDATE {t}
#                     SET updated_at = ?
#                     WHERE id = ?
#                 ''', (datetime.now().isoformat(), payment_id))
#                 continue
#
#             # –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞ ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –ª–æ–≥–∏–∫—É –ø—Ä–µ–∂–Ω–µ–π
#             if bill.status == BillStatus.success:
#                 await cursor.execute(f'''
#                     UPDATE {t}
#                     SET status = 'success',
#                         updated_at = ?,
#                         commission = ?
#                     WHERE id = ?
#                 ''', (datetime.now().isoformat(), getattr(bill, 'commission', 0), payment_id))
#
#                 # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
#                 try:
#                     await bot.send_message(
#                         user_id,
#                         f"üéâ <b>–û–ü–õ–ê–¢–ê –ü–†–û–®–õ–ê –£–°–ü–ï–®–ù–û!</b>\n\n"
#                         f"‚úÖ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∞—Ä–µ–Ω–¥–æ–π –µ—â—ë <b>{days} –¥–Ω–µ–π</b>.",
#                         parse_mode='HTML',
#                         reply_markup=user_keyboard
#                     )
#                 except Exception:
#                     pass
#
#                 # –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã
#                 if user_tuple:
#                     try:
#                         await add_rent_data(user_tuple[1], user_tuple[3], days=days)
#                     except Exception:
#                         pass
#
#             # –ü—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–π –ø–ª–∞—Ç—ë–∂ ‚Äî –ó–î–ï–°–¨ –≤—ã–ø–æ–ª–Ω—è–µ–º –õ–û–ì–ò–ö–£, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–Ω—å—à–µ –±—ã–ª–∞ –≤ time_diff > 15
#             elif bill.status == BillStatus.fail:
#                 # –ø–æ–º–µ—Ç–∏–º –∑–∞–ø–∏—Å—å –∫–∞–∫ fail
#                 await cursor.execute(f'''
#                     UPDATE {t}
#                     SET status = 'fail',
#                         updated_at = ?
#                     WHERE id = ?
#                 ''', (datetime.now().isoformat(), payment_id))
#
#                 # --- –æ–±—Ä–∞–±–æ—Ç–∫–∞ message_id (–º–æ–∂–µ—Ç –±—ã—Ç—å JSON —Å —Ä–æ–ª—è–º–∏ –∏–ª–∏ –æ–¥–∏–Ω–æ—á–Ω—ã–π id) ---
#                 if message_id:
#                     # –±–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏–º message_id
#                     parsed = message_id
#                     if isinstance(message_id, (str, bytes)):
#                         try:
#                             parsed = json.loads(message_id)
#                         except (json.JSONDecodeError, TypeError):
#                             parsed = message_id
#
#                     # –µ—Å–ª–∏ dict —Å —Ä–æ–ª—è–º–∏ ('admin'/'user' -> {chat_id: msg_id, ...})
#                     if isinstance(parsed, dict):
#                         for role_name, role_dict in parsed.items():
#                             if not isinstance(role_dict, dict):
#                                 continue
#                             for chat_id_raw, msg_id_raw in role_dict.items():
#                                 try:
#                                     chat_id = int(chat_id_raw)
#                                     msg_id = int(msg_id_raw)
#                                 except Exception:
#                                     # –µ—Å–ª–∏ –Ω–µ –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ int ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
#                                     continue
#
#                                 # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
#                                 try:
#                                     await bot.delete_message(chat_id=chat_id, message_id=msg_id)
#                                 except Exception:
#                                     pass
#
#                                 # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
#                                 try:
#                                     if role_name == 'admin':
#                                         await bot.send_message(
#                                             chat_id=chat_id,
#                                             text=(
#                                                 "‚ùå <b>–°–ß–Å–¢ –ü–†–û–°–†–û–ß–ï–ù</b>\n\n"
#                                                 f"‚è∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username or (user_tuple[1] if user_tuple else str(user_id))} –Ω–µ –æ–ø–ª–∞—Ç–∏–ª –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç."
#                                             ),
#                                             reply_markup=admin_keyboard,
#                                             parse_mode="HTML"
#                                         )
#                                     else:
#                                         await bot.send_message(
#                                             chat_id=chat_id,
#                                             text=(
#                                                 "‚ùå <b>–í–†–ï–ú–Ø –û–ü–õ–ê–¢–´ –ò–°–¢–ï–ö–õ–û</b>\n\n"
#                                                 "‚è∞ –í—ã –Ω–µ —É—Å–ø–µ–ª–∏ –æ–ø–ª–∞—Ç–∏—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.\n\n"
#                                                 "üí° –í—ã –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –∑–∞–Ω–æ–≤–æ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ"
#                                             ),
#                                             parse_mode="HTML",
#                                             reply_markup=user_keyboard
#                                         )
#                                 except Exception as e:
#                                     # –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏, –Ω–æ –Ω–µ –ª–æ–º–∞–µ–º —Ü–∏–∫–ª
#                                     print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {chat_id=} {msg_id=}: {e}")
#
#                     else:
#                         # –æ–¥–∏–Ω–æ—á–Ω—ã–π message_id (—Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ —á–∏—Å–ª–æ) ‚Äî —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#                         try:
#                             single_msg_id = int(parsed)
#                             try:
#                                 await bot.delete_message(chat_id=int(user_id), message_id=single_msg_id)
#                             except Exception:
#                                 pass
#
#                             try:
#                                 await bot.send_message(
#                                     chat_id=int(user_id),
#                                     text=(
#                                         "‚ùå <b>–í–†–ï–ú–Ø –û–ü–õ–ê–¢–´ –ò–°–¢–ï–ö–õ–û</b>\n\n"
#                                         "‚è∞ –í—ã –Ω–µ —É—Å–ø–µ–ª–∏ –æ–ø–ª–∞—Ç–∏—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.\n\n"
#                                         "üí° –í—ã –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –∑–∞–Ω–æ–≤–æ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ"
#                                     ),
#                                     parse_mode="HTML",
#                                     reply_markup=user_keyboard
#                                 )
#                             except Exception as e:
#                                 print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id=} {single_msg_id=}: {e}")
#                         except Exception:
#                             # parsed –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ int ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
#                             pass
#
#                 # (–∑–∞–º–µ—á–∞–Ω–∏–µ) –±–æ–ª—å—à–µ –Ω–∏–∫–∞–∫–∏—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ "–û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞" –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
#                 # (–æ—Å—Ç–∞–ª—Å—è —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω–Ω—ã–µ –∏–∑ time_diff)
#
#             else:
#                 # —Å—Ç–∞—Ç—É—Å —Å—á–µ—Ç–∞ –ø–æ–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω/–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ ‚Äî –æ–±–Ω–æ–≤–∏–º –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Å—Ç–∞–≤–∏–º pending
#                 await cursor.execute(f'''
#                     UPDATE {t}
#                     SET updated_at = ?
#                     WHERE id = ?
#                 ''', (datetime.now().isoformat(), payment_id))
#
#         await conn.commit()




