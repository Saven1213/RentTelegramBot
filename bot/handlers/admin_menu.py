
import asyncio
import aiosqlite
from typing import Union
from aiogram import Router, F, Bot
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Message
from datetime import datetime
from aiogram.filters.callback_data import CallbackData

from bot.db.crud.config import DB_PATH

import json

from bot.db.crud.bike import get_bike_by_id, get_all_bikes, update_bike_to, delete_bike, update_bike_prices
from bot.db.crud.debts import get_debts, add_debt, remove_debt
from bot.db.crud.equips import save_equips, get_equips_user
from bot.db.crud.mix_conn import rent_bike
from bot.db.crud.names import get_personal_data
from bot.db.crud.payments.add_fail_status import fail_status
from bot.db.crud.payments.change_status import change_status_order
from bot.db.crud.payments.get_order import get_order
from bot.db.crud.photos.bike_rent import get_bike_extra_data, update_bike_photo, update_bike_description, \
    delete_bike_photo
from bot.db.crud.photos.map import add_photo
from bot.db.crud.pledge import add_pledge
from bot.db.crud.rent_data import get_data_rents, get_current_rent, get_user_by_rent_id
from bot.db.crud.user import get_user, get_all_users, change_role, change_ban_status

router = Router()


@router.callback_query(F.data == 'admin_main')
async def admin_menu(callback: CallbackQuery):
    tg_id = callback.from_user.id
    user = await get_user(tg_id)


    if user[-1] == 'moderator':
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="view_users")
                ],
                [
                    InlineKeyboardButton(text="‚ö° –°–¥–µ–ª–∞—Ç—å/–°–Ω—è—Ç—å admin", callback_data="toggle_admin")
                ],
                [
                    InlineKeyboardButton(text="‚õî –ó–∞–±–∞–Ω–∏—Ç—å/–†–∞–∑–±–∞–Ω–∏—Ç—å", callback_data="toggle_ban")
                ],

                [
                    InlineKeyboardButton(text='üõµ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã', callback_data='active_rents')
                ],
                [
                    InlineKeyboardButton(text='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data='settings_admin')
                ],
                [
                    InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main")
                ]
            ]
        )
    else:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="view_users")
                ],
                [
                    InlineKeyboardButton(text="‚õî –ó–∞–±–∞–Ω–∏—Ç—å/–†–∞–∑–±–∞–Ω–∏—Ç—å", callback_data="toggle_ban")
                ],
                [
                    InlineKeyboardButton(text='üõµ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã', callback_data='active_rents')
                ],
                [
                    InlineKeyboardButton(text='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data='settings_admin')
                ],
                [
                    InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main")
                ]
            ]
        )

    await callback.message.edit_text(
        "üõ† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
        reply_markup=keyboard
    )

# @router.callback_query(F.data == 'view_users')
# async def view_users_admin(callback: CallbackQuery):
#     users_list = await get_all_users()
#
#     keyboard = InlineKeyboardMarkup(inline_keyboard=[])
#
#     for user in users_list:
#         keyboard.inline_keyboard.append(
#             [
#                 InlineKeyboardButton(text=f"@{user[2]}", callback_data=f'view_user-{user[1]}')
#             ]
#         )
#     keyboard.inline_keyboard.append(
#         [
#             InlineKeyboardButton(text='–í –∞–¥–º–∏–Ω –º–µ–Ω—é', callback_data='admin_main')
#         ]
#     )
#
#     await callback.message.edit_text('–ö–ª–∏–µ–Ω—Ç—ã', reply_markup=keyboard)

from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton


class AdminStates(StatesGroup):
    searching_users = State()


@router.callback_query(F.data == 'view_users_start_search')
async def start_users_search(callback: CallbackQuery, state: FSMContext):

    msg = await callback.message.edit_text(
        "üîç <b>–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∏–º—è, —Ñ–∞–º–∏–ª–∏—é –∏–ª–∏ –æ–±–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:",
        parse_mode='HTML'
    )
    await state.update_data(search_msg_id=msg.message_id)
    await state.set_state(AdminStates.searching_users)
    await callback.answer()


@router.message(AdminStates.searching_users)
async def process_users_search(message: Message, state: FSMContext, bot: Bot):
    search_query = message.text.strip()

    if search_query:

        state_data = await state.get_data()
        search_msg_id = state_data.get('search_msg_id')


        if search_msg_id:
            try:
                await bot.delete_message(chat_id=message.from_user.id, message_id=search_msg_id)
            except:
                pass


        try:
            await message.delete()
        except:
            pass


        await state.update_data(
            users_search_query=search_query,
            users_search_results=None,
            search_msg_id=None
        )


        all_users = await get_all_users()
        search_results = []
        search_terms = search_query.lower().split()

        for user in all_users:
            pd = await get_personal_data(user[1])
            if pd:
                full_name = f"{pd[2]} {pd[3]}".lower()


                matches_all = True
                for term in search_terms:
                    if term not in full_name:
                        matches_all = False
                        break

                if matches_all:
                    search_results.append(user)

        await state.update_data(users_search_results=search_results)


        builder = InlineKeyboardBuilder()

        for user in search_results[:8]:
            pd = await get_personal_data(user[1])
            if pd:
                builder.row(
                    InlineKeyboardButton(
                        text=f"üë§ {pd[2]} {pd[3]}",
                        callback_data=f'view_user-{user[1]}'
                    )
                )


        action_buttons = [
            InlineKeyboardButton(text="üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –ø–æ–∏—Å–∫", callback_data='view_users_reset_search'),
            InlineKeyboardButton(text='‚öôÔ∏è –í –∞–¥–º–∏–Ω –º–µ–Ω—é', callback_data='admin_main')
        ]
        builder.row(*action_buttons)

        text = f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:</b> {search_query}\n\n–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(search_results)}"

        await message.answer(
            text,
            reply_markup=builder.as_markup(),
            parse_mode='HTML'
        )

    else:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")


@router.callback_query(F.data == 'view_users_reset_search')
async def reset_users_search(callback: CallbackQuery, state: FSMContext, bot: Bot):

    await state.update_data(
        users_search_query='',
        users_search_results=None
    )


    all_users = await get_all_users()

    builder = InlineKeyboardBuilder()


    for user in all_users[:8]:
        pd = await get_personal_data(user[1])
        if pd:
            builder.row(
                InlineKeyboardButton(
                    text=f"üë§ {pd[2]} {pd[3]}",
                    callback_data=f'view_user-{user[1]}'
                )
            )


    if len(all_users) > 8:
        total_pages = (len(all_users) + 7) // 8
        nav_buttons = [
            InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data="view_users_0"),
            InlineKeyboardButton(text=f"1/{total_pages}", callback_data="current_page"),
            InlineKeyboardButton(text="‚û°Ô∏è", callback_data="view_users_1")
        ]
        builder.row(*nav_buttons)

    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    action_buttons = [
        InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data='view_users_start_search'),
        InlineKeyboardButton(text='‚öôÔ∏è –í –∞–¥–º–∏–Ω –º–µ–Ω—é', callback_data='admin_main')
    ]
    builder.row(*action_buttons)

    text = f'üë• <b>–ö–ª–∏–µ–Ω—Ç—ã</b> (–°—Ç—Ä–∞–Ω–∏—Ü–∞ 1/{(len(all_users) + 7) // 8})\n\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(all_users)}'

    try:
        await callback.message.edit_text(
            text,
            reply_markup=builder.as_markup(),
            parse_mode='HTML'
        )
    except TelegramBadRequest:

        await callback.message.answer(
            text,
            reply_markup=builder.as_markup(),
            parse_mode='HTML'
        )

    await callback.answer()


@router.callback_query(F.data.startswith('view_users'))
async def view_users_admin(callback: CallbackQuery, state: FSMContext, bot: Bot):
    try:

        state_data = await state.get_data()
        search_query = state_data.get('users_search_query', '')
        search_results = state_data.get('users_search_results')

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        if callback.data == 'view_users':
            page = 0
            search_query = ''
            search_results = None
        elif callback.data.startswith('view_users_search_'):
            search_query = callback.data.replace('view_users_search_', '', 1)
            page = 0
            search_results = None
        elif callback.data == 'view_users_reset_search':
            page = 0
            search_query = ''
            search_results = None
        else:
            try:
                parts = callback.data.split('_')
                page = int(parts[-1])
            except ValueError:
                page = 0

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        all_users = await get_all_users()

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–∏—Å–∫ –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø—Ä–æ—Å
        if search_query and search_results is None:
            search_results = []
            search_terms = search_query.lower().split()

            for user in all_users:
                pd = await get_personal_data(user[1])
                if pd:
                    full_name = f"{pd[2]} {pd[3]}".lower()
                    matches_all = True
                    for term in search_terms:
                        if term not in full_name:
                            matches_all = False
                            break
                    if matches_all:
                        search_results.append(user)

        users_list = search_results if search_query and search_results else all_users

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(
            users_search_query=search_query,
            users_search_results=search_results if search_query else None
        )

        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        page_size = 8
        total_pages = max(1, (len(users_list) + page_size - 1) // page_size)
        page = max(0, min(page, total_pages - 1))
        start_idx = page * page_size
        end_idx = start_idx + page_size
        page_users = users_list[start_idx:end_idx]

        builder = InlineKeyboardBuilder()

        # –ö–Ω–æ–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for user in page_users:
            pd = await get_personal_data(user[1])
            if pd:
                builder.row(
                    InlineKeyboardButton(
                        text=f"üë§ {pd[2]} {pd[3]}",
                        callback_data=f'view_user-{user[1]}'
                    )
                )

        # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        if len(users_list) > page_size:
            nav_buttons = []
            if page > 0:
                nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f'view_users_{page - 1}'))

            nav_buttons.append(InlineKeyboardButton(text=f"{page + 1}/{total_pages}", callback_data='current_page'))

            if page < total_pages - 1:
                nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f'view_users_{page + 1}'))

            builder.row(*nav_buttons)

        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        action_buttons = []
        if search_query:
            action_buttons.append(
                InlineKeyboardButton(text="üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –ø–æ–∏—Å–∫", callback_data='view_users_reset_search'))
        else:
            action_buttons.append(
                InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data='view_users_start_search'))

        action_buttons.append(InlineKeyboardButton(text='‚öôÔ∏è –í –∞–¥–º–∏–Ω –º–µ–Ω—é', callback_data='admin_main'))
        builder.row(*action_buttons)

        # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        search_info = f"üîç –ü–æ–∏—Å–∫: {search_query}\n" if search_query else ""
        text = (
            f'üë• <b>–ö–ª–∏–µ–Ω—Ç—ã</b> (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages})\n\n'
            f'{search_info}'
            f'–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_list)}'
        )

        # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await callback.message.edit_text(
                text,
                reply_markup=builder.as_markup(),
                parse_mode='HTML'
            )
        except TelegramBadRequest as e:
            if "message to edit not found" in str(e):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await callback.message.answer(
                    text,
                    reply_markup=builder.as_markup(),
                    parse_mode='HTML'
                )
            elif "message is not modified" not in str(e):
                raise e

        await callback.answer()

    except Exception as e:
        print(f"Error in view_users_admin: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data.split('-')[0] == 'view_user')
async def view_select_user_admin(callback: CallbackQuery):
    data = callback.data.split('-')[1]
    user = await get_user(data)
    pd = await get_personal_data(data)

    full_name = f'{pd[2]} {pd[3]}'
    user_card = f"""
    <code>‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê</code>
    <b>  üë§ –ü–†–û–§–ò–õ–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø  </b>
    <code>‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§</code>
    <b>‚îÇ</b> üîπ ID: <code>#{user[0]}</code>
    <b>‚îÇ</b> üîπ –ò–º—è: {full_name or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
    <b>‚îÇ</b> üîπ TG ID: <code>{user[1]}</code>
    <code>‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§</code>
    <b>‚îÇ</b> üèç –¢–µ–∫—É—â–∏–π —Å–∫—É—Ç–µ—Ä: 
    <b>‚îÇ</b>   ‚ñ´Ô∏è ID: <b>{user[3] or '‚Äî'}</b>
    <b>‚îÇ</b>   ‚ñ´Ô∏è –ú–æ–¥–µ–ª—å: <b>{user[4] or '‚Äî'}</b>
    <code>‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§</code>
    <b>‚îÇ</b> üë• –†–µ—Ñ–µ—Ä–∞–ª—ã: <b>{user[5] or 0}</b>
    <b>‚îÇ</b> üö´ –°—Ç–∞—Ç—É—Å: <b>{'üî¥ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' if user[6] else 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω'}</b>
    <code>‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò</code>
    """

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìä –ò—Å—Ç–æ—Ä–∏—è –∞—Ä–µ–Ω–¥", callback_data=f"rent_history-{user[1]}")
        ],
        [
            InlineKeyboardButton(text="üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data="referral_user")
        ],
        [
            InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings_user")
        ],
        [
            InlineKeyboardButton(text='üõ°Ô∏è –≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞', callback_data=f'equips-{user[1]}'),
            InlineKeyboardButton(text='üí∞ –î–æ–ª–≥–∏', callback_data=f'debts-{user[1]}')
        ],
        [
            InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='admin_main')
        ]
    ])
    await callback.message.edit_text(text=user_card, reply_markup=keyboard, parse_mode='HTML')


@router.callback_query(F.data.split('-')[0] == 'rent_history')
async def check_rent_history(callback: CallbackQuery):
    data = callback.data.split('-')[1]
    rents = await get_data_rents(data)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    user = await get_user(data)

    if rents:
        for rent in rents:

            status_icon = "üü¢" if rent[6] == 'active' else "üî¥"  # rent[5] - —Å—Ç–∞—Ç—É—Å

            keyboard.inline_keyboard.append(
                [
                    InlineKeyboardButton(
                        text=f'{status_icon} –ê—Ä–µ–Ω–¥–∞ #{rent[0]}',
                        callback_data=f'history_rents-{rent[0]}'
                    )
                ]
            )

        keyboard.inline_keyboard.append(
            [
                InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data=f'view_user-{user[1]}')
            ]
        )

        pd = await get_personal_data(data)

        full_name = f'{pd[2]} {pd[3]}'

        await callback.message.edit_text(
            f"üìã <b>–ò–°–¢–û–†–ò–Ø –ê–†–ï–ù–î</b>\n"
            f"üë§ <i>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {full_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}</i>\n\n"
            f"üèçÔ∏è <b>–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–µ–∑–¥–æ–∫:</b>\n"
            f"üü¢ ‚Äî –∞–∫—Ç–∏–≤–Ω—ã–µ\n"
            f"üî¥ ‚Äî –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ/–æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ",
            parse_mode='HTML',
            reply_markup=keyboard
        )
    else:
        keyboard.inline_keyboard.append(
            [
                InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data=f'view_user-{user[1]}')
            ]
        )

        await callback.message.edit_text(
            f'üì≠ <b>–ò–°–¢–û–†–ò–Ø –ê–†–ï–ù–î –ü–£–°–¢–ê</b>\n\n'
            f'‚ú® <i>–£ @{user[2] or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ"} –µ—â–µ –Ω–µ –±—ã–ª–æ –∞—Ä–µ–Ω–¥ —Å–∫—É—Ç–µ—Ä–æ–≤</i>',
            reply_markup=keyboard,
            parse_mode='HTML'
        )


@router.callback_query(F.data.split('-')[0] == 'history_rents')
async def current_rent_user_admin(callback: CallbackQuery):
    data = callback.data.split('-')[1]
    data_rent = await get_current_rent(data)


    start_time = datetime.fromisoformat(data_rent[4]).strftime('%d.%m.%Y %H:%M')
    end_time = datetime.fromisoformat(data_rent[5]).strftime('%d.%m.%Y %H:%M') if data_rent[4] else "–ù–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"


    status_icons = {
        'active': 'üü¢ –ê–∫—Ç–∏–≤–Ω–∞',
        'unactive': '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞',
        'cancelled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞',
        'pending': '‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ'
    }
    status = status_icons.get(data_rent[6], data_rent[6])

    pd = await get_personal_data(data_rent[1])

    full_name = f'{pd[2]} {pd[3]}'

    bike = await get_bike_by_id(data_rent[2])

    rent_card = f"""
<code>‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê</code>
<b>  üìã –î–ï–¢–ê–õ–ò –ê–†–ï–ù–î–´ #{data_rent[0]}  </b>
<code>‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§</code>
<b>‚îÇ</b> üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{full_name}</code>
<b>‚îÇ</b> üÜî ID –∞—Ä–µ–Ω–¥—ã: <code>#{data_rent[0]}</code>
<b>‚îÇ</b> üèç ID —Å–∫—É—Ç–µ—Ä–∞: <code>{bike[2]} #{bike[1]}</code>
<code>‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§</code>
<b>‚îÇ</b> üïê –ù–∞—á–∞–ª–æ: <b>{start_time}</b>
<b>‚îÇ</b> üïî –û–∫–æ–Ω—á–∞–Ω–∏–µ: <b>{end_time}</b>
<b>‚îÇ</b> üìä –°—Ç–∞—Ç—É—Å: <b>{status}</b>
<code>‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îõ</code>
"""

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=f"rent_history-{data_rent[1]}")]
        ])

    await callback.message.edit_text(
        text=rent_card,
        parse_mode='HTML',
        reply_markup=keyboard
    )




ITEMS = ["—à–ª–µ–º", "–±–∞–≥–∞–∂–Ω–∏–∫", "—Ü–µ–ø—å", "—Å—É–º–∫–∞", "—Ä–µ–∑–∏–Ω–∫–∞", "–¥–µ—Ä–∂–∞—Ç–µ–ª—å", "–∑–∞—Ä—è–¥–∫–∞"]
CODE_MAP = {
    "—à–ª–µ–º": "h",
    "–±–∞–≥–∞–∂–Ω–∏–∫": "b",
    "—Ü–µ–ø—å": "c",
    "—Å—É–º–∫–∞": "s",
    "—Ä–µ–∑–∏–Ω–∫–∞": "r",
    "–¥–µ—Ä–∂–∞—Ç–µ–ª—å": "d",
    "–∑–∞—Ä—è–¥–∫–∞": "z",
}

CODE_TO_ITEM = {v: k for k, v in CODE_MAP.items()}


class ItemToggleCallback(CallbackData, prefix="toggle"):
    item: str
    order_id: str
    bike_id: str


class EquipmentSelection(StatesGroup):
    choosing = State()


def get_items_keyboard(selections: dict, order_id: str, bike_id: str) -> InlineKeyboardMarkup:
    inline_keyboard = []
    for item in ITEMS:
        emoji = "üü¢" if selections.get(item, False) else "üî¥"
        btn = InlineKeyboardButton(
            text=f"{item} {emoji}",
            callback_data=ItemToggleCallback(item=item, order_id=order_id, bike_id=bike_id).pack()
        )
        inline_keyboard.append([btn])


    selected_codes = "".join(CODE_MAP[item] for item in ITEMS if selections.get(item, False))

    confirm_btn = InlineKeyboardButton(
        text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —ç–∫–∏–ø–∏—Ä–æ–≤–∫—É",
        callback_data=f"confirm_equipment-{order_id}-{bike_id}-{selected_codes}"
    )
    inline_keyboard.append([confirm_btn])

    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)


@router.callback_query(F.data.split('-')[0] == 'confirm_rent_admin')
async def confirm_but_rent(callback: CallbackQuery, bot: Bot, state: FSMContext):
    parts = callback.data.split('-')
    order_id = parts[1]
    bike_id = parts[2]


    selections = {item: False for item in ITEMS}
    await state.set_state(EquipmentSelection.choosing)
    await state.update_data(order_id=order_id, bike_id=bike_id, selections=selections)

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —ç–∫–∏–ø–∏—Ä–æ–≤–∫—É:",
        reply_markup=get_items_keyboard(selections, order_id, bike_id)
    )


@router.callback_query(ItemToggleCallback.filter())
async def toggle_item_callback(query: CallbackQuery, callback_data: ItemToggleCallback, state: FSMContext):
    # –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    data = await state.get_data()
    order_id = data.get("order_id")
    bike_id = data.get("bike_id")
    selections = data.get("selections")


    if not selections or order_id != callback_data.order_id:
        order_id = callback_data.order_id
        bike_id = callback_data.bike_id
        selections = {item: False for item in ITEMS}


    if callback_data.item in ITEMS:
        selections[callback_data.item] = not selections.get(callback_data.item, False)


    await state.update_data(order_id=order_id, bike_id=bike_id, selections=selections)
    await state.set_state(EquipmentSelection.choosing)


    await query.message.edit_reply_markup(
        reply_markup=get_items_keyboard(selections, order_id, bike_id)
    )
    await query.answer()


@router.callback_query(F.data.split('-')[0] == 'confirm_equipment')
async def confirm_equipment_handler(callback: CallbackQuery, bot: Bot, state: FSMContext):
    user_id = callback.from_user.id
    parts = callback.data.split('-')
    order_id = parts[1]
    bike_id = parts[2]
    selected_codes = parts[3] if len(parts) > 3 else ""


    selected_items = [CODE_TO_ITEM[c] for c in selected_codes if c in CODE_TO_ITEM]


    helmet  = "—à–ª–µ–º"     in selected_items
    chain   = "—Ü–µ–ø—å"     in selected_items
    box     = "—Å—É–º–∫–∞"    in selected_items
    trunk   = "–±–∞–≥–∞–∂–Ω–∏–∫" in selected_items
    rubber  = "—Ä–µ–∑–∏–Ω–∫–∞"  in selected_items
    holder  = "–¥–µ—Ä–∂–∞—Ç–µ–ª—å" in selected_items
    charger = "–∑–∞—Ä—è–¥–∫–∞"  in selected_items


    order = await get_order(order_id)
    await save_equips(order[1], helmet, chain, box, trunk, rubber, holder, charger)
    await change_status_order(order_id, 'success')


    order = await get_order(order_id)
    order_msgs_json = order[-3]
    order_msgs = json.loads(order_msgs_json)

    admin_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main")]]
    )
    user_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main"),
                          InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")]]
    )
    pledge = 2000

    try:
        await callback.message.edit_text(
            text=(
                "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ\n\n"
                f"‚ñ´Ô∏è –ê—Ä–µ–Ω–¥–∞: {int(order[4])} ‚ÇΩ\n"
                f"‚ñ´Ô∏è –ó–∞–ª–æ–≥: {pledge} ‚ÇΩ\n"
                f"‚ñ´Ô∏è –ò—Ç–æ–≥–æ: {int(order[4] + pledge)} ‚ÇΩ\n"
                f"‚ñ´Ô∏è –≠–∫–∏–ø: {', '.join(selected_items) if selected_items else '–Ω–µ—Ç'}"
            ),
            parse_mode='HTML', reply_markup=admin_keyboard
        )
    except Exception:
        pass


    for role_name, role_dict in order_msgs.items():
        for chat_id, msg_id in role_dict.items():
            if role_name == 'admin' and int(chat_id) == user_id:
                continue
            try:
                await bot.delete_message(chat_id=int(chat_id), message_id=int(msg_id))
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {chat_id=} {msg_id=}: {e}")


    await bot.send_message(
        chat_id=order[1],
        text=(
            "üéâ <b>–ê—Ä–µ–Ω–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n\n"
            "–í–∞—à —Å–∫—É—Ç–µ—Ä –≥–æ—Ç–æ–≤ –∫ –ø–æ–µ–∑–¥–∫–µ. üö¥\n"
            "–ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å —Å–≤–æ–±–æ–¥–æ–π –∏ —Å–∫–æ—Ä–æ—Å—Ç—å—é –Ω–∞ –¥–æ—Ä–æ–≥–∞—Ö!\n\n"
            "–ñ–µ–ª–∞–µ–º –æ—Ç–ª–∏—á–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø–æ–µ–∑–¥–∫–∏! üåü"
        ),
        parse_mode="HTML",
        reply_markup=user_keyboard
    )


    await rent_bike(order[1], int(bike_id), order[-2])
    await add_pledge(order[1], pledge, order_id, int(bike_id))


    await state.clear()



class CancelRentStates(StatesGroup):
    waiting_comment = State()


@router.callback_query(F.data.split('-')[0] == 'cancel_rent_admin')
async def cancel_rent_admin(callback: CallbackQuery, state: FSMContext):
    order_id = callback.data.split('-')[1]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"cancel_comment-{order_id}")],
        [InlineKeyboardButton(text="‚ùå –ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è", callback_data=f"cancel_no_comment-{order_id}")]
    ])
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ, —Ö–æ—Ç–∏—Ç–µ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∞—Ä–µ–Ω–¥—ã?",
        reply_markup=keyboard
    )
    await callback.answer()


@router.callback_query(F.data.split('-')[0] == 'cancel_comment')
async def cancel_rent_with_comment(callback: CallbackQuery, state: FSMContext):
    order_id = callback.data.split('-')[1]
    await state.update_data(order_id=order_id, admin_msg_id=callback.message.message_id)
    await state.set_state(CancelRentStates.waiting_comment)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è', callback_data=f'cancel_comment_skip-{order_id}')]
    ])
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ—Ç–º–µ–Ω–µ –∞—Ä–µ–Ω–¥—ã:",
        reply_markup=keyboard
    )
    await callback.answer()


@router.message(CancelRentStates.waiting_comment)
async def process_cancel_comment(message: Message, state: FSMContext, bot: Bot):
    data_state = await state.get_data()
    order_id = data_state['order_id']
    admin_msg_id = data_state.get('admin_msg_id')

    if admin_msg_id:
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=admin_msg_id)
        except Exception:
            pass

    comment = message.text.strip()
    await state.clear()

    await execute_cancel_rent(order_id, bot, comment)

    keyboard_admin = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main")],
    ])

    await message.answer(
        "‚ùå –ê—Ä–µ–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ —Å –≤–∞—à–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º.",
        reply_markup=keyboard_admin
    )


@router.callback_query(F.data.split('-')[0] == 'cancel_no_comment')
async def cancel_rent_without_comment(callback: CallbackQuery, bot: Bot):
    order_id = callback.data.split('-')[1]
    await execute_cancel_rent(order_id, bot)
    keyboard_admin = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main")],
    ])
    await callback.message.edit_text(
        "‚ùå –ê—Ä–µ–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.",
        reply_markup=keyboard_admin
    )
    await callback.answer()


@router.callback_query(F.data.split('-')[0] == 'cancel_comment_skip')
async def cancel_rent_skip_comment(callback: CallbackQuery, bot: Bot, state: FSMContext):
    order_id = callback.data.split('-')[1]
    admin_msg_id = callback.message.message_id
    await state.clear()
    try:
        await bot.delete_message(chat_id=callback.message.chat.id, message_id=admin_msg_id)
    except Exception:
        pass
    await execute_cancel_rent(order_id, bot)
    keyboard_admin = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main")],
    ])
    await callback.message.answer("‚ùå –ê—Ä–µ–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.", reply_markup=keyboard_admin)
    await callback.answer()


async def execute_cancel_rent(order_id: str, bot: Bot, comment: str = None):
    order = await get_order(order_id)
    msg_dict = json.loads(order[-3])

    for role_name, role_dict in msg_dict.items():
        for chat_id, msg_id in role_dict.items():
            try:
                await bot.delete_message(chat_id=int(chat_id), message_id=int(msg_id))
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {chat_id=} {msg_id=}: {e}")

    text = "‚ùå <i>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–º–µ–Ω–∏–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞—Ä–µ–Ω–¥—É</i>\n\n"
    if comment:
        text += f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n\n<blockquote>{comment}</blockquote>"

    keyboard_user = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main")]]
    )

    await bot.send_message(
        chat_id=order[1],
        text=text,
        parse_mode='HTML',
        reply_markup=keyboard_user
    )

    await fail_status(order[2])














@router.callback_query(F.data == 'settings_admin')
async def settings(callback: CallbackQuery, state: FSMContext):
    await state.clear()

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text='üìç –û–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ä—Ç—É', callback_data='change_map')
            ],
            [
                InlineKeyboardButton(text='üèçÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫—É—Ç–µ—Ä–∞–º–∏', callback_data='settings_bikes')
            ],
            [
                InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', callback_data='admin_main')
            ]
        ]
    )

    await callback.message.edit_text('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è ', reply_markup=keyboard)


class ChangeMap(StatesGroup):
    change_new_map = State()


def back_kb():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="settings_admin")]
        ]
    )


@router.callback_query(F.data == 'change_map')
async def change_map(callback: CallbackQuery, state: FSMContext):
    await state.set_state(ChangeMap.change_new_map)

    await callback.answer()

    msg = await callback.message.edit_text(
        "–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –Ω–æ–≤–æ–π –∫–∞—Ä—Ç—ã:",
        reply_markup=back_kb()
    )

    await state.update_data(msg=msg.message_id)


@router.message(ChangeMap.change_new_map, F.photo)
async def update_map(message: Message, state: FSMContext, bot: Bot):

    tg_id = message.from_user.id

    user = await get_user(tg_id)

    file_id = message.photo[-1].file_id
    msg_id_del = message.message_id

    await add_photo(file_id)
    if user[-1] == 'moderator':
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="view_users")
                ],
                [
                    InlineKeyboardButton(text="‚ö° –°–¥–µ–ª–∞—Ç—å/–°–Ω—è—Ç—å admin", callback_data="toggle_admin")
                ],
                [
                    InlineKeyboardButton(text="‚õî –ó–∞–±–∞–Ω–∏—Ç—å/–†–∞–∑–±–∞–Ω–∏—Ç—å", callback_data="toggle_ban")
                ],

                [
                    InlineKeyboardButton(text='üõµ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã', callback_data='active_rents')
                ],
                [
                    InlineKeyboardButton(text='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data='settings_admin')
                ],
                [
                    InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main")
                ]
            ]
        )
    else:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="view_users")
                ],
                [
                    InlineKeyboardButton(text="‚õî –ó–∞–±–∞–Ω–∏—Ç—å/–†–∞–∑–±–∞–Ω–∏—Ç—å", callback_data="toggle_ban")
                ],
                [
                    InlineKeyboardButton(text='üõµ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã', callback_data='active_rents')
                ],
                [
                    InlineKeyboardButton(text='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data='settings_admin')
                ],
                [
                    InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main")
                ]
            ]
        )


    data = await state.get_data()
    await bot.delete_message(chat_id=tg_id, message_id=data['msg'])

    await bot.send_message(
        chat_id=tg_id,
        text='‚úÖ –§–æ—Ç–æ –∫–∞—Ä—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!'
    )
    await bot.delete_message(chat_id=tg_id, message_id=msg_id_del)

    await bot.send_message(
        chat_id=tg_id,
        text="üõ† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
        reply_markup=keyboard
    )

    await state.clear()


@router.callback_query(F.data.split('-')[0] == 'debts')
async def debts_admin(callback: CallbackQuery):
    user_id = callback.data.split('-')[1]
    user_debts = await get_debts(user_id)


    if user_debts:
        debts_text = "üìã <b>–°–ø–∏—Å–æ–∫ –¥–æ–ª–≥–æ–≤:</b>\n\n"
        total_debt = 0

        for debt in user_debts:
            tg_id, amount, description = debt
            debts_text += f"‚Ä¢ {description}: <b>{amount} —Ä—É–±.</b>\n"
            total_debt += amount

        debts_text += f"\nüíµ <b>–û–±—â–∞—è —Å—É–º–º–∞ –¥–æ–ª–≥–∞: {total_debt} —Ä—É–±.</b>"
    else:
        debts_text = "‚úÖ <b>–î–æ–ª–≥–æ–≤ –Ω–µ—Ç</b>"


    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ–ª–≥",
                    callback_data=f"add_debt-{user_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚ûñ –°–Ω—è—Ç—å –¥–æ–ª–≥",
                    callback_data=f"remove_debt-{user_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
                    callback_data=f"view_user-{user_id}"
                )
            ]
        ]
    )

    await callback.message.edit_text(
        text=debts_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )


class AddDebtStates(StatesGroup):
    waiting_for_amount = State()
    waiting_for_description = State()


@router.callback_query(F.data.split('-')[0] == 'add_debt')
async def add_debt_start(callback: CallbackQuery, state: FSMContext, bot: Bot):
    user_id = callback.data.split('-')[1]

    await state.set_state(AddDebtStates.waiting_for_amount)
    await state.update_data(
        user_id=user_id,
        bot_messages=[callback.message.message_id]  # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    )


    sent_message = await callback.message.answer(
        text="üí∏ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–≥–∞</b>\n\n"
             "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ–ª–≥–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):",
        parse_mode="HTML"
    )


    data = await state.get_data()
    bot_messages = data.get('bot_messages', [])
    bot_messages.append(sent_message.message_id)
    await state.update_data(bot_messages=bot_messages)

    await callback.answer()


@router.message(AddDebtStates.waiting_for_amount)
async def process_debt_amount(message: Message, state: FSMContext, bot: Bot):

    data = await state.get_data()
    user_messages = data.get('user_messages', [])
    user_messages.append(message.message_id)
    await state.update_data(user_messages=user_messages)

    try:
        amount = int(message.text)
        if amount <= 0:

            sent_message = await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            data = await state.get_data()
            bot_messages = data.get('bot_messages', [])
            bot_messages.append(sent_message.message_id)
            await state.update_data(bot_messages=bot_messages)
            return

        await state.update_data(amount=amount)
        await state.set_state(AddDebtStates.waiting_for_description)


        sent_message = await message.answer(
            "üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–≥–∞:\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: '–ó–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ —Å–∫—É—Ç–µ—Ä–∞'"
        )

        data = await state.get_data()
        bot_messages = data.get('bot_messages', [])
        bot_messages.append(sent_message.message_id)
        await state.update_data(bot_messages=bot_messages)

    except ValueError:

        sent_message = await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):")
        data = await state.get_data()
        bot_messages = data.get('bot_messages', [])
        bot_messages.append(sent_message.message_id)
        await state.update_data(bot_messages=bot_messages)


@router.message(AddDebtStates.waiting_for_description)
async def process_debt_description(message: Message, state: FSMContext, bot: Bot):

    data = await state.get_data()
    user_messages = data.get('user_messages', [])
    user_messages.append(message.message_id)
    await state.update_data(user_messages=user_messages)

    description = message.text.strip()

    if len(description) < 3:

        sent_message = await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –í–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
        data = await state.get_data()
        bot_messages = data.get('bot_messages', [])
        bot_messages.append(sent_message.message_id)
        await state.update_data(bot_messages=bot_messages)
        return

    data = await state.get_data()
    user_id = data['user_id']
    amount = data['amount']
    bot_messages = data.get('bot_messages', [])
    user_messages = data.get('user_messages', [])


    await add_debt(tg_id=user_id, amount=amount, description=description)


    chat_id = message.chat.id


    for msg_id in bot_messages:
        try:
            await bot.delete_message(chat_id=chat_id, message_id=msg_id)
        except Exception as e:
            pass


    for msg_id in user_messages:
        try:
            await bot.delete_message(chat_id=chat_id, message_id=msg_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg_id}: {e}")

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥–æ–ª–≥–∞–º",
                    callback_data=f"debts-{user_id}"
                )
            ]
        ]
    )

    pd = await get_personal_data(user_id)

    await message.answer(
        f"‚úÖ <b>–î–æ–ª–≥ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
        f"üë§ –ö–ª–∏–µ–Ω—Ç: {pd[2]} {pd[3]}\n"
        f"üíµ –°—É–º–º–∞: {amount} —Ä—É–±.\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}",
        parse_mode="HTML",
        reply_markup=keyboard
    )

class RemoveDebtStates(StatesGroup):
    waiting_for_debt_choice = State()
    waiting_for_confirmation = State()

@router.callback_query(F.data.split('-')[0] == 'remove_debt')
async def remove_debt_start(callback: CallbackQuery, state: FSMContext):
    user_id = callback.data.split('-')[1]
    user_debts = await get_debts(user_id)

    if not user_debts:
        await callback.answer("‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –¥–æ–ª–≥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return

    await state.set_state(RemoveDebtStates.waiting_for_debt_choice)
    await state.update_data(user_id=user_id, debts=user_debts)


    keyboard_buttons = []

    for i, debt in enumerate(user_debts):
        tg_id, amount, description = debt[0], debt[1], debt[2]
        keyboard_buttons.append([
            InlineKeyboardButton(
                text=f"‚ùå {description} - {amount} —Ä—É–±.",
                callback_data=f"select_debt-{i}"  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å –¥–æ–ª–≥–∞
            )
        ])


    keyboard_buttons.append([
        InlineKeyboardButton(
            text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –¥–æ–ª–≥–∞–º",
            callback_data=f"debts-{user_id}"
        )
    ])

    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

    await callback.message.edit_text(
        text="üóëÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–≥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</b>",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()



@router.callback_query(F.data == 'cancel_add_debt')
async def cancel_add_debt(callback: CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    user_id = data.get('user_id')
    bot_messages = data.get('bot_messages', [])
    user_messages = data.get('user_messages', [])

    chat_id = callback.message.chat.id


    for msg_id in bot_messages:
        try:
            await bot.delete_message(chat_id=chat_id, message_id=msg_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ {msg_id}: {e}")


    for msg_id in user_messages:
        try:
            await bot.delete_message(chat_id=chat_id, message_id=msg_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg_id}: {e}")

    await state.clear()

    if user_id:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥–æ–ª–≥–∞–º",
                        callback_data=f"debts-{user_id}"
                    )
                ]
            ]
        )
        await callback.message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–≥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=keyboard)
    else:
        await callback.message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–≥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")

    await callback.answer()


@router.callback_query(F.data.split('-')[0] == 'select_debt')
async def select_debt_for_removal(callback: CallbackQuery, state: FSMContext):
    debt_index = int(callback.data.split('-')[1])
    data = await state.get_data()
    user_id = data['user_id']
    debts = data['debts']

    selected_debt = debts[debt_index]
    tg_id, amount, description = selected_debt[0], selected_debt[1], selected_debt[2]

    await state.update_data(selected_debt_index=debt_index)
    await state.set_state(RemoveDebtStates.waiting_for_confirmation)

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å",
                    callback_data="confirm_remove_debt"
                ),
                InlineKeyboardButton(
                    text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å",
                    callback_data=f"debts-{user_id}"
                )
            ]
        ]
    )

    await callback.message.edit_text(
        text=f"‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –¥–æ–ª–≥–∞:</b>\n\n"
             f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n"
             f"üíµ <b>–°—É–º–º–∞:</b> {amount} —Ä—É–±.\n\n"
             f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –¥–æ–ª–≥?",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == 'confirm_remove_debt')
async def confirm_remove_debt(callback: CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    user_id = data['user_id']
    debts = data['debts']
    debt_index = data['selected_debt_index']

    selected_debt = debts[debt_index]
    tg_id, amount, description = selected_debt[0], selected_debt[1], selected_debt[2]


    success = await remove_debt(tg_id, amount, description)

    if success:

        await callback.message.edit_text(
            text=f"‚úÖ <b>–î–æ–ª–≥ —É–¥–∞–ª–µ–Ω!</b>\n\n"
                 f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n"
                 f"üíµ <b>–°—É–º–º–∞:</b> {amount} —Ä—É–±.\n\n"
                 f"–î–æ–ª–≥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã.",
            parse_mode="HTML"
        )
    else:
        await callback.message.edit_text(
            text="‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–æ–ª–≥–∞</b>\n\n"
                 "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –¥–æ–ª–≥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            parse_mode="HTML"
        )


    await asyncio.sleep(2)

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥–æ–ª–≥–∞–º",
                    callback_data=f"debts-{user_id}"
                )
            ]
        ]
    )

    await callback.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

    await state.clear()
    await callback.answer()


@router.callback_query(F.data.split('-')[0] == 'equips')
async def equipment_user(callback: CallbackQuery):
    user_id = callback.data.split('-')[1]
    equip_user = await get_equips_user(user_id)
    pd = await get_personal_data(user_id)

    first_name = pd[2] or ""
    last_name = pd[3] or ""
    full_name = f"{first_name} {last_name}".strip()


    equips_map = {
        2: "ü™ñ –®–ª–µ–º",
        3: "‚õìÔ∏è –¶–µ–ø—å",
        4: "üéí –¢–µ—Ä–º–æ–∫–æ—Ä–æ–±",
        5: "üß≥ –ë–∞–≥–∞–∂–Ω–∏–∫",
        6: "ü™¢ –†–µ–∑–∏–Ω–∫–∞",
        7: "üì± –î–µ—Ä–∂–∞—Ç–µ–ª—å –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
        8: "üîå –ó–∞—Ä—è–¥–∫–∞",
    }

    # —Å–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–æ–π —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
    available_equips = [
        equips_map[idx] for idx, value in enumerate(equip_user) if idx in equips_map and value
    ]

    # —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
    if available_equips:
        text = (
            f"üõ°Ô∏è <b>–≠–ö–ò–ü–ò–†–û–í–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø</b>\n\n"
            f"üë§ <b>–í–ª–∞–¥–µ–ª–µ—Ü:</b> {full_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
            f"‚úÖ <b>–î–æ—Å—Ç—É–ø–Ω–∞—è —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∞:</b>\n"
            f"{chr(10).join(['‚ñ´Ô∏è ' + item for item in available_equips])}\n\n"
        )
    else:
        text = (
            f"üõ°Ô∏è <b>–≠–ö–ò–ü–ò–†–û–í–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø</b>\n\n"
            f"üë§ <b>–í–ª–∞–¥–µ–ª–µ—Ü:</b> {full_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
            f"üö´ <i>–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏</i>\n\n"
            f"üí° <i>–ú–æ–∂–Ω–æ –≤—ã–¥–∞—Ç—å —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</i>"
        )

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f'view_user-{user_id}')]
        ]
    )

    await callback.message.edit_text(
        text=text,
        parse_mode='HTML',
        reply_markup=keyboard
    )



@router.callback_query(F.data == 'toggle_admin')
async def toggle_admin(callback: CallbackQuery):
    try:
        users = await get_all_users()

        keyboard_buttons = []

        for user in users:
            if user[-1] == 'moderator':
                continue

            pd = await get_personal_data(user[1])
            if pd and len(pd) >= 4:
                full_name = f'{pd[2]} {pd[3]}'
            else:
                full_name = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #{user[1]}'

            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=f"üë§ {full_name}",
                    callback_data=f'toggle_current_user-{user[1]}'
                )
            ])

        keyboard_buttons.append([
            InlineKeyboardButton(
                text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
                callback_data="admin_main"
            )
        ])

        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        admin_text = """
üéõÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏</b>

üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>
–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –Ω–∞–∑–Ω–∞—á–∏—Ç—å/—Å–Ω—è—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.

‚ö†Ô∏è <i>–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ —ç—Ç–æ–º —Å–ø–∏—Å–∫–µ</i>
"""

        await callback.message.edit_text(
            text=admin_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer()

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ toggle_admin: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")


@router.callback_query(F.data.split('-')[0] == 'toggle_current_user')
async def toggle_current_user_admin(callback: CallbackQuery):
    try:
        user_id = int(callback.data.split('-')[1])

        user = await get_user(user_id)
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        current_role = user[-1]

        pd = await get_personal_data(user_id)
        if pd and len(pd) >= 4:
            full_name = f'{pd[2]} {pd[3]}'
        else:
            full_name = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #{user_id}'

        if current_role == 'user':
            button_text = "üîº –°–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
            new_role = 'admin'
            action_text = "–Ω–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
        else:
            button_text = "üîΩ –°–Ω—è—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
            new_role = 'user'
            action_text = "—Å–Ω—è—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"confirm_toggle-{user_id}-{new_role}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É",
                    callback_data="toggle_admin"
                )
            ]
        ])

        role_icons = {
            'user': 'üë§ –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            'admin': 'üõ°Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
            'moderator': 'üéõÔ∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä'
        }
        current_role_text = role_icons.get(current_role, current_role)

        confirm_text = f"""
üéõÔ∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {full_name}
üìä <b>–¢–µ–∫—É—â–∞—è —Ä–æ–ª—å:</b> {current_role_text}

‚ö†Ô∏è <b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ {action_text}?</b>
"""

        await callback.message.edit_text(
            text=confirm_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer()

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ toggle_current_user: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data.split('-')[0] == 'confirm_toggle')
async def confirm_toggle_admin(callback: CallbackQuery):
    try:
        data_parts = callback.data.split('-')
        user_id = int(data_parts[1])
        new_role = data_parts[2]

        await change_role(user_id)

        user = await get_user(user_id)
        pd = await get_personal_data(user_id)

        if pd and len(pd) >= 4:
            full_name = f'{pd[2]} {pd[3]}'
        else:
            full_name = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #{user_id}'

        role_icons = {
            'user': 'üë§ –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            'admin': 'üõ°Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
            'moderator': 'üéõÔ∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä'
        }
        new_role_text = role_icons.get(new_role, new_role)

        result_text = f"""
‚úÖ <b>–ü—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω—ã!</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {full_name}
üéõÔ∏è <b>–ù–æ–≤–∞—è —Ä–æ–ª—å:</b> {new_role_text}

üí° –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ.
"""

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É",
                    callback_data="toggle_admin"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                    callback_data="main"
                )
            ]
        ])

        await callback.message.edit_text(
            text=result_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer()

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ confirm_toggle: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–∞–≤")


@router.callback_query(F.data == 'toggle_ban')
async def toggle_ban(callback: CallbackQuery):
    try:
        users = await get_all_users()

        keyboard_buttons = []

        for user in users:
            if user[-1] == 'moderator':
                continue
            pd = await get_personal_data(user[1])
            if pd and len(pd) >= 4:
                full_name = f'{pd[2]} {pd[3]}'
            else:
                full_name = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #{user[1]}'

            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=f"üë§ {full_name}",
                    callback_data=f'toggle_ban_user-{user[1]}'
                )
            ])

        keyboard_buttons.append([
            InlineKeyboardButton(
                text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
                callback_data="admin_main"
            )
        ])

        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        ban_text = """
üö´ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º–∏</b>

üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>
–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å.
"""

        await callback.message.edit_text(
            text=ban_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer()

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ toggle_ban: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")


@router.callback_query(F.data.split('-')[0] == 'toggle_ban_user')
async def toggle_ban_user(callback: CallbackQuery):
    try:
        user_id = int(callback.data.split('-')[1])

        user = await get_user(user_id)
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        current_ban_status = user[-2]  # 1 –∏–ª–∏ 0

        pd = await get_personal_data(user_id)
        if pd and len(pd) >= 4:
            full_name = f'{pd[2]} {pd[3]}'
        else:
            full_name = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #{user_id}'

        if current_ban_status == 0:
            button_text = "üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å"
            new_ban_status = 1
            action_text = "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å"
            current_status_text = "‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π"
        else:
            button_text = "üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å"
            new_ban_status = 0
            action_text = "—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å"
            current_status_text = "üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"confirm_ban-{user_id}-{new_ban_status}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
                    callback_data="admin_main"
                )
            ]
        ])

        confirm_text = f"""
üö´ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {full_name}
üìä <b>–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:</b> {current_status_text}

‚ö†Ô∏è <b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ {action_text} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?</b>
"""

        await callback.message.edit_text(
            text=confirm_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer()

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ toggle_ban_user: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data.split('-')[0] == 'confirm_ban')
async def confirm_ban_user(callback: CallbackQuery):
    try:
        data_parts = callback.data.split('-')
        user_id = int(data_parts[1])
        new_ban_status = int(data_parts[2])

        await change_ban_status(user_id)

        user = await get_user(user_id)
        pd = await get_personal_data(user_id)

        if pd and len(pd) >= 4:
            full_name = f'{pd[2]} {pd[3]}'
        else:
            full_name = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #{user_id}'

        if new_ban_status == 1:
            new_status_text = "üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
            action_result = "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
        else:
            new_status_text = "‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π"
            action_result = "—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"

        result_text = f"""
‚úÖ <b>–°—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏–∑–º–µ–Ω–µ–Ω!</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {full_name}
üö´ <b>–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:</b> {new_status_text}

üí° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ {action_result}.
"""

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É",
                    callback_data="toggle_ban"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                    callback_data="main"
                )
            ]
        ])

        await callback.message.edit_text(
            text=result_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer()

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ confirm_ban: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")


@router.callback_query(F.data == 'active_rents')
async def active_rents_admin(callback: CallbackQuery, state: FSMContext):
    try:
        async with aiosqlite.connect('rent-bike.db') as conn:
            cursor = await conn.cursor()
            await cursor.execute("SELECT * FROM rent_details WHERE status = 'active'")
            active_rents = await cursor.fetchall()

        if not active_rents:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_main")]
            ])
            await callback.message.edit_text(
                text="üì≠ <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥ –Ω–µ—Ç</b>\n\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥.",
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            return

        await state.update_data(active_rents=active_rents, current_page=0)

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏", callback_data="search_rents")],
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞—Ä–µ–Ω–¥", callback_data="show_all_rents")],
            [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_main")]
        ])

        await callback.message.edit_text(
            text="üèç <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ active_rents_admin: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞—Ä–µ–Ω–¥")


@router.callback_query(F.data == 'show_all_rents')
async def show_all_rents(callback: CallbackQuery, state: FSMContext):
    async with aiosqlite.connect('rent-bike.db') as conn:
        cursor = await conn.cursor()
        await cursor.execute("SELECT * FROM rent_details WHERE status = 'active'")
        all_rents = await cursor.fetchall()

    await state.update_data(
        active_rents=all_rents,
        current_page=0,
        search_query=None,
        is_search=False,
        all_rents=all_rents
    )
    await show_rent_page(callback, state)


@router.callback_query(F.data == 'search_rents')
async def search_rents_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(SearchRentStates.waiting_for_name)

    data = await state.get_data()
    if 'all_rents' not in data:
        async with aiosqlite.connect('rent-bike.db') as conn:
            cursor = await conn.cursor()
            await cursor.execute("SELECT * FROM rent_details WHERE status = 'active'")
            all_rents = await cursor.fetchall()
        await state.update_data(all_rents=all_rents)

    await callback.message.edit_text(
        text="üîç <b>–ü–æ–∏—Å–∫ –∞—Ä–µ–Ω–¥ –ø–æ –∏–º–µ–Ω–∏</b>\n\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—é –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞:",
        parse_mode="HTML"
    )
    await callback.answer()


class SearchRentStates(StatesGroup):
    waiting_for_name = State()


@router.message(SearchRentStates.waiting_for_name)
async def process_search_name(message: Message, state: FSMContext):
    search_query = message.text.strip().lower()

    data = await state.get_data()
    all_rents = data.get('all_rents', [])

    found_rents = []

    for rent in all_rents:
        user_id = rent[1]
        pd = await get_personal_data(user_id)

        if pd and len(pd) >= 4:
            first_name = pd[2].lower() if pd[2] else ""
            last_name = pd[3].lower() if pd[3] else ""
            full_name = f"{first_name} {last_name}"

            if (search_query in first_name or
                    search_query in last_name or
                    search_query in full_name or
                    first_name in search_query or
                    last_name in search_query):
                found_rents.append(rent)

    if found_rents:
        await state.update_data(
            active_rents=found_rents,
            current_page=0,
            search_query=search_query,
            is_search=True
        )
        await show_rent_page(message, state)
    else:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîç –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="search_rents")],
            [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="active_rents")]
        ])

        await message.answer(
            text=f"‚ùå <b>–ê—Ä–µ–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>\n\n–ü–æ –∑–∞–ø—Ä–æ—Å—É \"{message.text}\" –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=keyboard,
            parse_mode="HTML"
        )

    await state.set_state(None)


async def show_rent_page(update: Union[Message, CallbackQuery], state: FSMContext):
    data = await state.get_data()
    active_rents = data.get('active_rents', [])
    current_page = data.get('current_page', 0)
    search_query = data.get('search_query')
    is_search = data.get('is_search', False)

    if not active_rents:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚Ü©Ô∏è –í –∞–¥–º–∏–Ω–∫—É", callback_data="admin_main")]
        ])

        if isinstance(update, CallbackQuery):
            await update.message.edit_text(
                text="üì≠ <b>–ê—Ä–µ–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>",
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        else:
            await update.answer(
                text="üì≠ <b>–ê—Ä–µ–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>",
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        return

    rent = active_rents[current_page]
    rent_id, user_id, bike_id, notified, start_time, end_time, status, days, pledge = rent

    pd = await get_personal_data(user_id)
    user_name = f"{pd[2]} {pd[3]}" if pd and len(pd) >= 4 else f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #{user_id}"

    bike = await get_bike_by_id(bike_id)
    bike_name = bike[2] if bike else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–∞–π–∫"
    display_bike_id = bike[1] if bike else bike_id

    start_str = datetime.fromisoformat(start_time).strftime('%d.%m.%Y %H:%M')
    end_str = datetime.fromisoformat(end_time).strftime('%d.%m.%Y %H:%M') if end_time else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

    search_info = f"üîç –ü–æ–∏—Å–∫: \"{search_query}\"\n\n" if is_search and search_query else ""

    rent_card = f"""
{search_info}üèç <b>–ê–ö–¢–ò–í–ù–ê–Ø –ê–†–ï–ù–î–ê #{rent_id}</b>

üë§ <b>–ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä:</b> {user_name}
üìû <b>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> <code>{user_id}</code>

üèç <b>–ë–∞–π–∫:</b> {bike_name}
üî¢ <b>–ù–æ–º–µ—Ä –±–∞–π–∫–∞:</b> <code>{display_bike_id}</code>

üïê <b>–ù–∞—á–∞–ª–æ:</b> {start_str}
üïî <b>–û–∫–æ–Ω—á–∞–Ω–∏–µ:</b> {end_str}
üìÖ <b>–î–Ω–µ–π –∞—Ä–µ–Ω–¥—ã:</b> {days}
üí∞ <b>–ó–∞–ª–æ–≥:</b> {pledge} —Ä—É–±.

üìä <b>–°—Ç–∞—Ç—É—Å:</b> üü¢ –ê–∫—Ç–∏–≤–Ω–∞
"""

    keyboard_buttons = []

    if len(active_rents) > 1:
        nav_buttons = []
        if current_page > 0:
            nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data="rent_prev"))

        nav_buttons.append(InlineKeyboardButton(
            text=f"{current_page + 1}/{len(active_rents)}",
            callback_data="rent_page"
        ))

        if current_page < len(active_rents) - 1:
            nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data="rent_next"))

        keyboard_buttons.append(nav_buttons)

    # –î–û–ë–ê–í–õ–Ø–ï–ú –ö–ù–û–ü–ö–£ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ê–†–ï–ù–î–û–ô
    keyboard_buttons.append([
        InlineKeyboardButton(
            text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥–æ–π",
            callback_data=f"manage_rent-{rent_id}"
        )
    ])

    nav_buttons = []
    if is_search:
        nav_buttons.append(InlineKeyboardButton(text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search_rents"))
    keyboard_buttons.append(nav_buttons)

    keyboard_buttons.append([
        InlineKeyboardButton(text="‚Ü©Ô∏è –í –∞–¥–º–∏–Ω–∫—É", callback_data="admin_main")
    ])

    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

    if isinstance(update, CallbackQuery):
        await update.message.edit_text(text=rent_card, reply_markup=keyboard, parse_mode="HTML")
    else:
        await update.answer(text=rent_card, reply_markup=keyboard, parse_mode="HTML")


@router.callback_query(F.data == 'rent_prev')
async def rent_previous(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_page = data.get('current_page', 0)
    if current_page > 0:
        await state.update_data(current_page=current_page - 1)
        await show_rent_page(callback, state)
    await callback.answer()


@router.callback_query(F.data == 'rent_next')
async def rent_next(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    active_rents = data.get('active_rents', [])
    current_page = data.get('current_page', 0)
    if current_page < len(active_rents) - 1:
        await state.update_data(current_page=current_page + 1)
        await show_rent_page(callback, state)
    await callback.answer()



@router.callback_query(F.data.split('-')[0] == 'manage_rent')
async def manage_rent_handler(callback: CallbackQuery):
    rent_id = callback.data.split('-')[1]

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∞—Ä–µ–Ω–¥—É", callback_data=f"end_rent_admin-{rent_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∞—Ä–µ–Ω–¥—É", callback_data=f"cancel_rent_admin-{rent_id}")
        ],
        [
            InlineKeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–æ–º", callback_data=f"contact_renter-{rent_id}")
        ],
        [
            InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –∞—Ä–µ–Ω–¥–∞–º", callback_data="active_rents")
        ]
    ])

    await callback.message.edit_text(
        text=f"‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥–æ–π #{rent_id}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()



@router.callback_query(F.data.split('-')[0] == 'end_rent_admin')
async def end_rent_admin(callback: CallbackQuery):
    rent_id = callback.data.split('-')[1]

    await callback.answer(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã #{rent_id}")


@router.callback_query(F.data.split('-')[0] == 'cancel_rent_admin')
async def cancel_rent_admin(callback: CallbackQuery):
    rent_id = callback.data.split('-')[1]

    await callback.answer(f"–û—Ç–º–µ–Ω–∞ –∞—Ä–µ–Ω–¥—ã #{rent_id}")


@router.callback_query(F.data.split('-')[0] == 'contact_renter')
async def contact_renter(callback: CallbackQuery):
    rent_id = callback.data.split('-')[1]

    user_id = await get_user_by_rent_id(rent_id)
    pd = await get_personal_data(user_id)

    first_name = pd[2] if pd and len(pd) > 2 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    last_name = pd[3] if pd and len(pd) > 3 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    number = pd[4] if pd and len(pd) > 4 else "–ù–µ —É–∫–∞–∑–∞–Ω"

    contact_text = f"""
üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞</b>

üèç <b>–ê—Ä–µ–Ω–¥–∞:</b> #{rent_id}
üë§ <b>–ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä:</b> {first_name} {last_name}
üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>{number}</code>
üÜî <b>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> <code>{user_id}</code>

üí¨ <b>–°–ø–æ—Å–æ–±—ã —Å–≤—è–∑–∏:</b>
‚Ä¢ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üìã
‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ –≤ Telegram üëá
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞ üí¨
"""
    user = await get_user(tg_id=user_id)
    username = user[2]


    keyboard_buttons = []


    keyboard_buttons.append([
        InlineKeyboardButton(
            text="‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram",
            url=f"https://t.me/{username}"
        )
    ])


    keyboard_buttons.append([
        InlineKeyboardButton(
            text="üí¨ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ",
            callback_data=f"send_message-{user_id}"
        )
    ])


    if number != "–ù–µ —É–∫–∞–∑–∞–Ω":
        keyboard_buttons.append([
            InlineKeyboardButton(
                text="üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä",
                callback_data=f"copy_number-{number}"
            )
        ])

    keyboard_buttons.append([
        InlineKeyboardButton(
            text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é",
            callback_data=f"manage_rent-{rent_id}"
        )
    ])

    keyboard_buttons.append([
        InlineKeyboardButton(
            text="üè† –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
            callback_data="admin_main"
        )
    ])

    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

    await callback.message.edit_text(
        text=contact_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.split('-')[0] == 'copy_number')
async def copy_number_handler(callback: CallbackQuery):
    number = callback.data.split('-')[1]
    await callback.answer(f"üìã –ù–æ–º–µ—Ä {number} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞", show_alert=False)




@router.callback_query(F.data == 'settings_bikes')
async def sett_bikes(callback: CallbackQuery, state: FSMContext):
    await state.clear()

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text='üöÄ –î–æ–±–∞–≤–∏—Ç—å —Å–∫—É—Ç–µ—Ä', callback_data='add_bike'),
            InlineKeyboardButton(text='‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data='edit_bike_list')
        ],
        [

            InlineKeyboardButton(text='üè∑Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—ã', callback_data='change_prices')
        ],
        [
            InlineKeyboardButton(text='üõë –í—ã–≤–µ—Å—Ç–∏ –∏–∑ –∞—Ä–µ–Ω–¥—ã', callback_data='delete_scoot')
        ],
        [
            InlineKeyboardButton(text='‚Ü©Ô∏è –í –∞–¥–º–∏–Ω–∫—É', callback_data='admin_main'),
            InlineKeyboardButton(text='üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main')
        ]
    ])

    text = """
üèçÔ∏è <b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–ê–†–ö–û–ú –°–ö–£–¢–ï–†–û–í</b>

<code>‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê</code>
<b>‚îÇ  üöÄ  –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –ö–û–ù–¢–†–û–õ–¨  ‚îÇ</b>
<code>‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò</code>

<code>‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ</code> <b>–û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:</b>
<code>‚îÇ</code>   üöÄ <b>–î–æ–±–∞–≤–∏—Ç—å —Å–∫—É—Ç–µ—Ä</b> - –Ω–æ–≤—ã–π –≤ —Å–∏—Å—Ç–µ–º—É
<code>‚îÇ</code>   ‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</b> - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
<code>‚îÇ</code>   üè∑Ô∏è <b>–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—ã</b> - –∞—Ä–µ–Ω–¥–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã
<code>‚îÇ</code>   üõë <b>–£–¥–∞–ª–∏—Ç—å –∏–∑ –±–∞–∑—ã</b> - –£–¥–∞–ª–µ–Ω–∏–µ —Å–∫—É—Ç–µ—Ä–∞


<code>‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ</code> <i>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª ‚Üì</i>
"""

    try:
        await callback.message.edit_text(
            text=text,
            parse_mode='HTML',
            reply_markup=keyboard
        )
    except TelegramBadRequest:
        try:
            await callback.message.delete()
        except:
            pass
        await callback.message.answer(
            text=text,
            parse_mode='HTML',
            reply_markup=keyboard
        )
    await callback.answer()


class AddBikeStates(StatesGroup):
    waiting_name = State()
    waiting_number = State()
    waiting_photo = State()
    waiting_oil = State()
    waiting_description = State()
    waiting_vin = State()
    confirmation = State()


@router.callback_query(F.data == 'add_bike')
async def add_bike_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AddBikeStates.waiting_name)
    await state.update_data(messages_to_delete=[callback.message.message_id])

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel_add_bike')]
    ])

    text = "üöÄ <b>–î–û–ë–ê–í–õ–ï–ù–ò–ï –ù–û–í–û–ì–û –°–ö–£–¢–ï–†–ê</b>\n\nüìù –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å —Å–∫—É—Ç–µ—Ä–∞:\n‚Ä¢ üîµ <b>dio</b> - Honda Dio\n‚Ä¢ üü¢ <b>jog</b> - Yamaha Jog  \n‚Ä¢ üî¥ <b>gear</b> - Yamaha Gear\n\nüí° <i>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏:</i>"

    sent_message = await callback.message.answer(text=text, parse_mode='HTML', reply_markup=keyboard)
    await state.update_data(messages_to_delete=[sent_message.message_id])
    await callback.answer()


@router.message(AddBikeStates.waiting_name)
async def process_bike_name(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    messages_to_delete = data.get('messages_to_delete', [])
    messages_to_delete.append(message.message_id)

    for msg_id in messages_to_delete:
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
        except:
            pass

    model = message.text.strip().lower()
    if model not in ['dio', 'jog', 'gear']:
        sent_message = await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π: dio, jog, gear")
        await state.update_data(messages_to_delete=[sent_message.message_id])
        return

    await state.update_data(model=model)
    await state.set_state(AddBikeStates.waiting_number)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='settings_bikes')]
    ])

    sent_message = await message.answer("üî¢ <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–∫—É—Ç–µ—Ä–∞:</b>\n\n<i>–¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: 56</i>",
                                        parse_mode='HTML', reply_markup=keyboard)
    await state.update_data(messages_to_delete=[sent_message.message_id])


@router.message(AddBikeStates.waiting_number)
async def process_bike_number(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    messages_to_delete = data.get('messages_to_delete', [])
    messages_to_delete.append(message.message_id)

    for msg_id in messages_to_delete:
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
        except:
            pass

    try:
        bike_number = int(message.text.strip())
        if bike_number <= 0:
            sent_message = await message.answer("‚ùå –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
            await state.update_data(messages_to_delete=[sent_message.message_id])
            return
    except ValueError:
        sent_message = await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)")
        await state.update_data(messages_to_delete=[sent_message.message_id])
        return

    await state.update_data(bike_number=bike_number)
    await state.set_state(AddBikeStates.waiting_photo)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='settings_bikes')]
    ])

    sent_message = await message.answer(
        "üì∏ <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å–∫—É—Ç–µ—Ä–∞:</b>\n\n<i>–õ—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ</i>",
        parse_mode='HTML',
        reply_markup=keyboard)
    await state.update_data(messages_to_delete=[sent_message.message_id])


@router.message(AddBikeStates.waiting_photo, F.photo)
async def process_bike_photo(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    messages_to_delete = data.get('messages_to_delete', [])
    messages_to_delete.append(message.message_id)

    for msg_id in messages_to_delete:
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
        except:
            pass

    best_photo = message.photo[-1]
    await state.update_data(photo_id=best_photo.file_id)

    current_state = await state.get_state()
    if current_state == AddBikeStates.waiting_photo.state:
        await state.set_state(AddBikeStates.waiting_oil)
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='settings_bikes')]
        ])
        sent_message = await message.answer(
            "üõ¢Ô∏è <b>–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–±–µ–≥ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–º–µ–Ω—ã –º–∞—Å–ª–∞:</b>\n\n<i>–¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: 23800</i>",
            parse_mode='HTML',
            reply_markup=keyboard)
        await state.update_data(messages_to_delete=[sent_message.message_id])
    else:
        data = await state.get_data()
        await show_bike_preview(message, data, state, bot)


@router.message(AddBikeStates.waiting_oil)
async def process_bike_oil(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    messages_to_delete = data.get('messages_to_delete', [])
    messages_to_delete.append(message.message_id)

    for msg_id in messages_to_delete:
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
        except:
            pass

    try:
        oil_change = int(message.text.strip())
        if oil_change < 0:
            sent_message = await message.answer("‚ùå –ü—Ä–æ–±–µ–≥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
            await state.update_data(messages_to_delete=[sent_message.message_id])
            return
    except ValueError:
        sent_message = await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ–±–µ–≥ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)")
        await state.update_data(messages_to_delete=[sent_message.message_id])
        return

    await state.update_data(oil_change=oil_change)
    await state.set_state(AddBikeStates.waiting_description)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='settings_bikes')]
    ])

    sent_message = await message.answer(
        "üìù <b>–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–∫—É—Ç–µ—Ä–∞:</b>\n\n<i>–ú–∞–∫—Å–∏–º—É–º 30 —Å–∏–º–≤–æ–ª–æ–≤. –ù–∞–ø—Ä–∏–º–µ—Ä: '–ö—Ä—É—Ç–æ–π —á–µ—Ä–Ω—ã–π —Å–∫—É—Ç–µ—Ä'</i>",
        parse_mode='HTML', reply_markup=keyboard)
    await state.update_data(messages_to_delete=[sent_message.message_id])


@router.message(AddBikeStates.waiting_description)
async def process_bike_description(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    messages_to_delete = data.get('messages_to_delete', [])
    messages_to_delete.append(message.message_id)

    for msg_id in messages_to_delete:
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
        except:
            pass

    description = message.text.strip()
    if len(description) > 30:
        sent_message = await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 30 —Å–∏–º–≤–æ–ª–æ–≤")
        await state.update_data(messages_to_delete=[sent_message.message_id])
        return

    await state.update_data(description=description)

    await state.set_state(AddBikeStates.waiting_vin)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='settings_bikes')]
    ])
    sent_message = await message.answer(
        "üîë <b>–í–≤–µ–¥–∏—Ç–µ VIN –Ω–æ–º–µ—Ä —Å–∫—É—Ç–µ—Ä–∞:</b>\n\n<i>–ü—Ä–∏–º–µ—Ä: JH2RC4467GK123456</i>",
        parse_mode='HTML',
        reply_markup=keyboard
    )
    await state.update_data(messages_to_delete=[sent_message.message_id])


@router.message(AddBikeStates.waiting_vin)
async def process_bike_vin(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    messages_to_delete = data.get('messages_to_delete', [])
    messages_to_delete.append(message.message_id)

    for msg_id in messages_to_delete:
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
        except:
            pass

    vin = message.text.strip()
    if len(vin) < 5:
        sent_message = await message.answer("‚ùå VIN —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
        await state.update_data(messages_to_delete=[sent_message.message_id])
        return

    await state.update_data(vin=vin)
    data = await state.get_data()
    await show_bike_preview(message, data, state, bot)


async def show_bike_preview(message: Message, data: dict, state: FSMContext, bot: Bot):
    model_icons = {'dio': 'üîµ DIO', 'jog': 'üü¢ JOG', 'gear': 'üî¥ GEAR'}
    model_display = model_icons.get(data['model'], f'üèç {data["model"].upper()}')

    vin_text = f"\n<b>üîë VIN:</b> {data['vin']}" if 'vin' in data else ""

    preview_text = (
        f"üèçÔ∏è <b>–ü–†–ï–í–¨–Æ –°–ö–£–¢–ï–†–ê</b>\n\n"
        f"<code>‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì</code>\n"
        f"<b>  –°–ö–£–¢–ï–† #{data['bike_number']}  </b>\n"
        f"<code>‚î£‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î´</code>\n"
        f"<b>‚îÇ  üöÄ –ú–æ–¥–µ–ª—å:</b> {model_display}\n"
        f"<b>‚îÇ  üîß –ü–æ—Å–ª–µ–¥–Ω–µ–µ –¢–û –≤ :</b> {data['oil_change']} –∫–º\n"
        f"<b>‚îÇ  ‚úÖ –°—Ç–∞—Ç—É—Å:</b> –°–í–û–ë–û–î–ï–ù{vin_text}\n"
        f"<code>‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ</code>\n\n"
        f"<blockquote><code>üìù {data['description']}</code></blockquote>\n\n"
        "<i>–í—Å—ë –≤–µ—Ä–Ω–æ?</i>"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='üì∏ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ', callback_data='change_photo'),
         InlineKeyboardButton(text='üìù –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', callback_data='change_description')],
        [InlineKeyboardButton(text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='confirm_bike'),
         InlineKeyboardButton(text='üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ', callback_data='restart_bike')],
        [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='settings_bikes')]
    ])

    messages_to_delete = data.get('messages_to_delete', [])
    for msg_id in messages_to_delete:
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
        except:
            pass

    sent_message = await message.answer_photo(photo=data['photo_id'], caption=preview_text,
                                              parse_mode='HTML', reply_markup=keyboard)
    await state.update_data(messages_to_delete=[sent_message.message_id])
    await state.set_state(AddBikeStates.confirmation)



@router.callback_query(F.data == 'change_photo', AddBikeStates.confirmation)
async def change_bike_photo(callback: CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    messages_to_delete = data.get('messages_to_delete', [])

    for msg_id in messages_to_delete:
        try:
            await bot.delete_message(chat_id=callback.message.chat.id, message_id=msg_id)
        except:
            pass


    await state.set_state(AddBikeStates.waiting_photo)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='settings_bikes')]
    ])
    sent_message = await callback.message.answer("üì∏ <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ:</b>", parse_mode='HTML',
                                                 reply_markup=keyboard)
    await state.update_data(messages_to_delete=[sent_message.message_id])
    await callback.answer()


@router.callback_query(F.data == 'change_description', AddBikeStates.confirmation)
async def change_bike_description(callback: CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    messages_to_delete = data.get('messages_to_delete', [])

    for msg_id in messages_to_delete:
        try:
            await bot.delete_message(chat_id=callback.message.chat.id, message_id=msg_id)
        except:
            pass


    await state.set_state(AddBikeStates.waiting_description)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='settings_bikes')]
    ])
    sent_message = await callback.message.answer("üìù <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:</b>", parse_mode='HTML',
                                                 reply_markup=keyboard)
    await state.update_data(messages_to_delete=[sent_message.message_id])
    await callback.answer()


@router.callback_query(F.data == 'confirm_bike', AddBikeStates.confirmation)
async def confirm_bike_add(callback: CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    messages_to_delete = data.get('messages_to_delete', [])

    for msg_id in messages_to_delete:
        try:
            await bot.delete_message(chat_id=callback.message.chat.id, message_id=msg_id)
        except:
            pass


    model = data['model']
    if model == 'dio':
        price_day = 500
        price_week = 400
        price_month = 300
    elif model == 'jog':
        price_day = 600
        price_week = 500
        price_month = 400
    elif model == 'gear':
        price_day = 700
        price_week = 600
        price_month = 500

    async with aiosqlite.connect(DB_PATH) as conn:
        cursor = await conn.cursor()
        await cursor.execute("""
            INSERT INTO bikes (bike_id, bike_type, change_oil_at, gas, is_free, price_day, price_week, price_month, vin) 
            VALUES (?, ?, ?, ?, 1, ?, ?, ?, ?)
        """, (data['bike_number'], data['model'], data['oil_change'], 95, price_day, price_week, price_month, data['vin']))

        await cursor.execute("""
            INSERT INTO photos_rent_bikes (bike_id, file_id, description) 
            VALUES (?, ?, ?)
        """, (data['bike_number'], data['photo_id'], data['description']))

        await conn.commit()

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text='‚Ü©Ô∏è –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º', callback_data='settings_bikes')
            ]
        ]
    )

    sent_message = await callback.message.answer(
        "‚úÖ <b>–°–ö–£–¢–ï–† –£–°–ü–ï–®–ù–û –î–û–ë–ê–í–õ–ï–ù!</b>\n\n–°–∫—É—Ç–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º—É –∏ –≥–æ—Ç–æ–≤ –∫ –∞—Ä–µ–Ω–¥–µ.", reply_markup=keyboard, parse_mode='HTML')
    await state.clear()
    await callback.answer()


@router.callback_query(F.data == 'restart_bike', AddBikeStates.confirmation)
async def restart_bike_add(callback: CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    messages_to_delete = data.get('messages_to_delete', [])

    for msg_id in messages_to_delete:
        try:
            await bot.delete_message(chat_id=callback.message.chat.id, message_id=msg_id)
        except:
            pass

    await state.clear()
    await add_bike_start(callback, state)
    await callback.answer()


class EditBikeStates(StatesGroup):
    choosing_bike = State()
    search_bikes = State()
    editing_bike = State()
    editing_photo = State()
    editing_description = State()
    editing_oil = State()
    editing_prices = State()
    confirm_delete = State()


@router.callback_query(F.data == 'edit_bike_list')
async def edit_bike_list(callback: CallbackQuery, state: FSMContext):
    bikes = await get_all_bikes()


    await state.update_data(
        all_bikes=bikes,
        current_page=0,
        total_pages=(len(bikes) + 4) // 5,
        search_results=bikes,
        search_query=None
    )

    await show_bikes_page(callback, state)
    await callback.answer()


async def show_bikes_page(update: Union[CallbackQuery, Message], state: FSMContext):
    data = await state.get_data()
    bikes = data.get('search_results', [])
    current_page = data.get('current_page', 0)
    total_pages = data.get('total_pages', 1)
    search_query = data.get('search_query')

    if not bikes:
        keyboard_buttons = [
            [InlineKeyboardButton(text='üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫', callback_data='search_bikes')]
        ]


        if search_query:
            keyboard_buttons.append([InlineKeyboardButton(text='üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –ø–æ–∏—Å–∫', callback_data='reset_search')])

        keyboard_buttons.append([InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='settings_bikes')])

        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        if isinstance(update, CallbackQuery):
            await update.message.edit_text("üì≠ –°–∫—É—Ç–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", reply_markup=keyboard)
        else:
            await update.answer("üì≠ –°–∫—É—Ç–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", reply_markup=keyboard)
        return


    start_idx = current_page * 5
    end_idx = start_idx + 5
    current_bikes = bikes[start_idx:end_idx]


    keyboard_buttons = []
    for bike in current_bikes:
        bike_id, bike_type, id_ = bike[1], bike[2], bike[0]
        icon = 'üîµ' if bike_type == 'dio' else 'üü¢' if bike_type == 'jog' else 'üî¥'
        keyboard_buttons.append([
            InlineKeyboardButton(
                text=f"{icon} {bike_type.upper()} #{bike_id}",
                callback_data=f"edit_bike-{id_}"
            )
        ])


    if len(bikes) > 5:
        nav_buttons = []
        if current_page > 0:
            nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="bikes_prev_page"))

        nav_buttons.append(InlineKeyboardButton(
            text=f"üìÑ {current_page + 1}/{total_pages}",
            callback_data="bikes_current_page"
        ))

        if current_page < total_pages - 1:
            nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data="bikes_next_page"))

        keyboard_buttons.append(nav_buttons)


    search_buttons = [
        [InlineKeyboardButton(text='üîç –ü–æ–∏—Å–∫ —Å–∫—É—Ç–µ—Ä–æ–≤', callback_data='search_bikes')]
    ]


    if search_query:
        search_buttons.append([InlineKeyboardButton(text='üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –ø–æ–∏—Å–∫', callback_data='reset_search')])

    search_buttons.append([InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='settings_bikes')])

    keyboard_buttons.extend(search_buttons)

    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

    search_info = f"üîç –ü–æ–∏—Å–∫: {search_query}\n\n" if search_query else ""
    text = f"{search_info}üèçÔ∏è <b>–í–´–ë–ï–†–ò–¢–ï –°–ö–£–¢–ï–† –î–õ–Ø –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø</b>\n\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1}/{total_pages}"

    if isinstance(update, CallbackQuery):
        await update.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
    else:
        await update.answer(text, reply_markup=keyboard, parse_mode='HTML')


@router.callback_query(F.data == 'bikes_prev_page')
async def bikes_previous_page(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_page = data.get('current_page', 0)

    if current_page > 0:
        await state.update_data(current_page=current_page - 1)
        await show_bikes_page(callback, state)

    await callback.answer()


@router.callback_query(F.data == 'bikes_next_page')
async def bikes_next_page(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_page = data.get('current_page', 0)
    total_pages = data.get('total_pages', 1)

    if current_page < total_pages - 1:
        await state.update_data(current_page=current_page + 1)
        await show_bikes_page(callback, state)

    await callback.answer()


@router.callback_query(F.data == 'search_bikes')
async def search_bikes_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(EditBikeStates.search_bikes)
    await callback.message.edit_text("üîç <b>–ü–û–ò–°–ö –°–ö–£–¢–ï–†–û–í</b>\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä, –º–æ–¥–µ–ª—å –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
                                     parse_mode='HTML')
    await callback.answer()


@router.message(EditBikeStates.search_bikes)
async def process_bike_search(message: Message, state: FSMContext):
    search_query = message.text.strip().lower()
    data = await state.get_data()
    all_bikes = data.get('all_bikes', [])

    found_bikes = []
    for bike in all_bikes:
        bike_id, bike_type = str(bike[1]), bike[2].lower()


        if search_query == str(bike_id) or search_query in str(bike_id):
            found_bikes.append(bike)

        elif search_query == bike_type or search_query in bike_type:
            found_bikes.append(bike)

        elif (search_query in f"{bike_type}{bike_id}" or
              search_query in f"{bike_id}{bike_type}"):
            found_bikes.append(bike)

    await state.update_data(
        search_results=found_bikes,
        current_page=0,
        search_query=search_query
    )
    await state.set_state(EditBikeStates.choosing_bike)

    try:
        await message.delete()
    except:
        pass

    await show_bikes_page(message, state)


@router.callback_query(F.data == 'reset_search')
async def reset_search_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    all_bikes = data.get('all_bikes', [])


    await state.update_data(
        search_results=all_bikes,
        current_page=0,
        search_query=None
    )

    await show_bikes_page(callback, state)
    await callback.answer()


@router.callback_query(lambda callback: callback.data.split('-')[0] == 'edit_bike')
async def edit_bike_detail(callback: CallbackQuery, state: FSMContext):
    bike_id_str = callback.data.split('-')[1]

    await state.clear()

    bike_data = await get_bike_by_id(bike_id_str)
    bike_extra_data = await get_bike_extra_data(bike_data[1])
    bike_desc = bike_extra_data[3]

    if not bike_data:
        await callback.answer("‚ùå –°–∫—É—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    bike_type, oil_change = bike_data[2], bike_data[4]

    icon = 'üîµ' if bike_type == 'dio' else 'üü¢' if bike_type == 'jog' else 'üî¥'

    text = f"""
{icon} <b>–°–ö–£–¢–ï–† #{bike_id_str}</b>

üèç –ú–æ–¥–µ–ª—å: <b>{bike_type.upper()}</b>
üõ¢Ô∏è –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–º–µ–Ω–∞ –º–∞—Å–ª–∞: {oil_change} –∫–º
üìù –û–ø–∏—Å–∞–Ω–∏–µ:

<blockquote><code>
{bike_desc}
</code></blockquote>

üí° <i>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</i>
"""

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='üõ¢Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–±–µ–≥ –¢–û', callback_data=f'edit_change_oil-{bike_id_str}')],
        [InlineKeyboardButton(text='üì∏ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ', callback_data=f'edit_change_photo-{bike_id_str}')],
        [InlineKeyboardButton(text='üìù –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', callback_data=f'edit_change_desc-{bike_id_str}')],
        [InlineKeyboardButton(text='‚ùå –£–¥–∞–ª–∏—Ç—å —Å–∫—É—Ç–µ—Ä', callback_data=f'edit_delete_bike-{bike_id_str}')],
        [InlineKeyboardButton(text='‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É', callback_data='edit_bike_list')]
    ])

    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
    await callback.answer()

@router.callback_query(F.data.split('-')[0] == 'edit_change_oil')
async def edit_change_oil(callback: CallbackQuery, state: FSMContext):
    await state.set_state(EditBikeStates.editing_oil)
    bike_id = callback.data.split('-')[1]
    msg = await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∑–∞–º–µ–Ω—É –º–∞—Å–ª–∞')
    await state.update_data(msg_oil=msg.message_id, bike_id=bike_id)

@router.message(EditBikeStates.editing_oil)
async def callback_oil(message: Message, state: FSMContext, bot: Bot):
    state_data = await state.get_data()
    bike_id = state_data['bike_id']
    msg_for_del = state_data.get('msg_oil')
    error_msg_id = state_data.get('error_msg_id')



    if error_msg_id:
        try:
            await bot.delete_message(chat_id=message.from_user.id, message_id=error_msg_id)
        except TelegramBadRequest:
            pass
        await state.update_data(error_msg_id=None)


    try:
        if msg_for_del:
            await bot.delete_message(chat_id=message.from_user.id, message_id=msg_for_del)
        await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id)
    except TelegramBadRequest:
        pass


    if message.text.isdigit():
        new_oil = int(message.text)


        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='‚Ü©Ô∏è –ö —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é', callback_data=f'edit_bike-{bike_id}')]
        ])

        bike = await get_bike_by_id(bike_id)

        if new_oil - bike[4] > 8000:
            error_msg = await message.answer(
                "‚ùå <b>–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –ø—Ä–æ–±–µ–≥ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è!</b>\n"
                f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–±–µ–≥: {bike[4]}, –≤–≤–µ–¥–µ–Ω–Ω—ã–π: {new_oil}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë!",
                parse_mode='HTML'
            )

            await state.update_data(error_msg_id=error_msg.message_id)
            return

        await message.answer(
            text='‚úÖ <b>–ü—Ä–æ–±–µ–≥ –∑–∞–º–µ–Ω—ã –º–∞—Å–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω</b>',
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        await state.clear()
        await update_bike_to(bike_id, new_oil)

    else:

        error_msg = await message.answer(
            '‚ùå <b>–¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã</b>\n\n–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–±–µ–≥:',
            parse_mode='HTML'
        )
        await state.update_data(error_msg_id=error_msg.message_id)


@router.callback_query(F.data.split('-')[0] == 'edit_change_photo')
async def edit_change_photo(callback: CallbackQuery, state: FSMContext):
    await state.set_state(EditBikeStates.editing_photo)
    bike_id = callback.data.split('-')[1]
    msg = await callback.message.edit_text('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ')
    await state.update_data(msg_photo=msg.message_id, bike_id=bike_id)


@router.message(EditBikeStates.editing_photo)
async def callback_photo(message: Message, state: FSMContext, bot: Bot):
    state_data = await state.get_data()
    bike_id = state_data['bike_id']


    if error_msg_id := state_data.get('error_msg_id'):
        try:
            await bot.delete_message(chat_id=message.from_user.id, message_id=error_msg_id)
        except TelegramBadRequest:
            pass


    if not message.photo:
        error_msg = await message.answer(
            'üì∏ <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ</b>\n\n' +
            '<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</i>',
            parse_mode='HTML'
        )
        await state.update_data(error_msg_id=error_msg.message_id)
        return


    try:
        if msg_for_del := state_data.get('msg_photo'):
            await bot.delete_message(chat_id=message.from_user.id, message_id=msg_for_del)
        await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id)
    except TelegramBadRequest:
        pass


    new_photo = message.photo[-1].file_id
    await update_bike_photo(bike_id, new_photo)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='‚Ü©Ô∏è –ö —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é', callback_data=f'edit_bike-{bike_id}')]
    ])

    await message.answer(
        '‚úÖ <b>–§–æ—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ</b>',
        parse_mode='HTML', reply_markup=keyboard
    )
    await state.clear()


@router.callback_query(lambda callback: callback.data.split('-')[0] == 'edit_change_desc')
async def edit_desc(callback: CallbackQuery, state: FSMContext):
    bike_id = callback.data.split('-')[1]
    msg = await callback.message.edit_text(
        'üìù <b>–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ</b>\n\n' +
        '<i>–ú–∞–∫—Å–∏–º—É–º 30 —Å–∏–º–≤–æ–ª–æ–≤</i>',
        parse_mode='HTML'
    )
    await state.set_state(EditBikeStates.editing_description)
    await state.update_data(msg_desc=msg.message_id, bike_id=bike_id)
    await callback.answer()


@router.message(EditBikeStates.editing_description)
async def callback_desc(message: Message, state: FSMContext, bot: Bot):
    state_data = await state.get_data()
    bike_id = state_data['bike_id']


    if error_msg_id := state_data.get('error_msg_id'):
        try:
            await bot.delete_message(chat_id=message.from_user.id, message_id=error_msg_id)
        except:
            pass


    new_description = message.text.strip()
    if len(new_description) > 30:
        error_msg = await message.answer(
            '‚ùå <b>–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ</b>\n\n' +
            '<i>–ú–∞–∫—Å–∏–º—É–º 30 —Å–∏–º–≤–æ–ª–æ–≤</i>',
            parse_mode='HTML'
        )
        await state.update_data(error_msg_id=error_msg.message_id)
        return


    try:
        if msg_desc := state_data.get('msg_desc'):
            await bot.delete_message(chat_id=message.from_user.id, message_id=msg_desc)
        await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id)
    except:
        pass

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='‚Ü©Ô∏è –ö —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é', callback_data=f'edit_bike-{bike_id}')]
    ])

    await update_bike_description(bike_id, new_description)

    await message.answer('‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ', reply_markup=keyboard)
    await state.clear()


@router.callback_query(lambda callback: callback.data.split('-')[0] == 'edit_delete_bike')
async def delete_bike_in_edit(callback: CallbackQuery):
    id_ = callback.data.split('-')[1]
    bike_data = await get_bike_by_id(id_)
    bike_id = bike_data[1]
    bike_name = bike_data[2]
    bike_type_icon = 'üîµ' if bike_name == 'dio' else 'üü¢' if bike_name == 'jog' else 'üî¥'

    text = (
        f'{bike_type_icon} <b>–£–î–ê–õ–ï–ù–ò–ï –°–ö–£–¢–ï–†–ê</b>\n\n'
        f'–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å <b>{bike_name.upper()} #{bike_id}</b>?\n\n'
        '‚ùå <i>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å</i>'
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data=f'confirm_delete_bike-{id_}'),
            InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data=f'edit_bike-{id_}')
        ]
    ])

    await callback.message.edit_text(text=text, reply_markup=keyboard, parse_mode='HTML')
    await callback.answer()


@router.callback_query(lambda callback: callback.data.split('-')[0] == 'confirm_delete_bike')
async def delete_bike_edit(callback: CallbackQuery):
    bike_id = callback.data.split('-')[1]

    bike_data = await get_bike_by_id(bike_id)
    bike_name = bike_data[2]
    bike_type_icon = 'üîµ' if bike_name == 'dio' else 'üü¢' if bike_name == 'jog' else 'üî¥'

    await delete_bike_photo(bike_id)
    await delete_bike(bike_data[0])

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main')],
        [InlineKeyboardButton(text='‚öôÔ∏è –í –∞–¥–º–∏–Ω-–º–µ–Ω—é', callback_data='admin_main')]
    ])

    text = (
        f'{bike_type_icon} <b>–°–ö–£–¢–ï–† –£–î–ê–õ–ï–ù</b>\n\n'
        f'<b>{bike_name.upper()} #{bike_id}</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã'
    )

    await callback.message.edit_text(text=text, reply_markup=keyboard, parse_mode='HTML')
    await callback.answer()


class ChangePrices(StatesGroup):
    waiting_title = State()
    waiting_day = State()
    waiting_week = State()
    waiting_month = State()


def back_kb_price():
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üîÑ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞", callback_data="change_prices")]]
    )



@router.callback_query(F.data == 'change_prices')
async def change_prices(callback: CallbackQuery, state: FSMContext):
    await state.set_state(ChangePrices.waiting_title)
    msg = await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–π–∫–∞ - dio, jog, gear",
        reply_markup=back_kb()
    )
    await state.update_data(msg_for_del=msg.message_id)



@router.message(ChangePrices.waiting_title)
async def wait_title(message: Message, state: FSMContext, bot: Bot):
    title = message.text.strip().lower()
    tg_id = message.from_user.id
    data = await state.get_data()
    msg_del = data.get('msg_for_del')


    try:
        if msg_del:
            await bot.delete_message(chat_id=tg_id, message_id=msg_del)
        await bot.delete_message(chat_id=tg_id, message_id=message.message_id)
    except TelegramBadRequest:
        pass

    valid_titles = ['dio', 'jog', 'gear']
    if title in valid_titles:
        await state.update_data(title=title)
        await state.set_state(ChangePrices.waiting_day)
        msg = await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –¥–µ–Ω—å (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):",
            reply_markup=back_kb_price()
        )
        await state.update_data(msg_for_del=msg.message_id)
    else:
        msg = await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: dio, jog, gear", reply_markup=back_kb())
        await state.update_data(msg_for_del=msg.message_id)



@router.message(ChangePrices.waiting_day)
async def wait_day_price(message: Message, state: FSMContext, bot: Bot):
    tg_id = message.from_user.id
    data = await state.get_data()
    msg_del = data.get('msg_for_del')

    try:
        if msg_del:
            await bot.delete_message(chat_id=tg_id, message_id=msg_del)
        await bot.delete_message(chat_id=tg_id, message_id=message.message_id)
    except TelegramBadRequest:
        pass

    if not message.text.isdigit():
        msg = await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –¥–ª—è —Ü–µ–Ω—ã –∑–∞ –¥–µ–Ω—å", reply_markup=back_kb_price())
        await state.update_data(msg_for_del=msg.message_id)
        return

    await state.update_data(day=int(message.text))
    await state.set_state(ChangePrices.waiting_week)
    msg = await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –Ω–µ–¥–µ–ª—é (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):", reply_markup=back_kb_price())
    await state.update_data(msg_for_del=msg.message_id)



@router.message(ChangePrices.waiting_week)
async def wait_week_price(message: Message, state: FSMContext, bot: Bot):
    tg_id = message.from_user.id
    data = await state.get_data()
    msg_del = data.get('msg_for_del')

    try:
        if msg_del:
            await bot.delete_message(chat_id=tg_id, message_id=msg_del)
        await bot.delete_message(chat_id=tg_id, message_id=message.message_id)
    except TelegramBadRequest:
        pass

    if not message.text.isdigit():
        msg = await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –¥–ª—è —Ü–µ–Ω—ã –∑–∞ –Ω–µ–¥–µ–ª—é", reply_markup=back_kb_price())
        await state.update_data(msg_for_del=msg.message_id)
        return

    await state.update_data(week=int(message.text))
    await state.set_state(ChangePrices.waiting_month)
    msg = await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –º–µ—Å—è—Ü (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):", reply_markup=back_kb_price())
    await state.update_data(msg_for_del=msg.message_id)



@router.message(ChangePrices.waiting_month)
async def wait_month_price(message: Message, state: FSMContext, bot: Bot):
    tg_id = message.from_user.id
    data = await state.get_data()
    msg_del = data.get('msg_for_del')

    try:
        if msg_del:
            await bot.delete_message(chat_id=tg_id, message_id=msg_del)
        await bot.delete_message(chat_id=tg_id, message_id=message.message_id)
    except TelegramBadRequest:
        pass

    if not message.text.isdigit():
        msg = await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –¥–ª—è —Ü–µ–Ω—ã –∑–∞ –º–µ—Å—è—Ü", reply_markup=back_kb_price())
        await state.update_data(msg_for_del=msg.message_id)
        return

    await state.update_data(month=int(message.text))


    title = data['title']
    day = data['day']
    week = data['week']
    month = int(message.text)

    await update_bike_prices(title, day, week, month)

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text='‚Ü©Ô∏è –ö —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é', callback_data='settings_bikes')
            ]
        ]
    )

    await message.answer(
        f"‚úÖ –¶–µ–Ω—ã –¥–ª—è –±–∞–π–∫–∞ <b>{title}</b> –æ–±–Ω–æ–≤–ª–µ–Ω—ã:\n"
        f"‚Ä¢ –î–µ–Ω—å: {day}\n"
        f"‚Ä¢ –ù–µ–¥–µ–ª—è: {week}\n"
        f"‚Ä¢ –ú–µ—Å—è—Ü: {month}",
        parse_mode="HTML"
    )

    await state.clear()


