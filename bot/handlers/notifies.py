from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Message
from aiogram.fsm.state import State, StatesGroup

from bot.db.crud.payments.create_payment import create_payment
from cardlink import CardLink
from cardlink._types import Bill
from bot.db.crud.bike import get_price

from bot.config import cl

import uuid

# from bot.db.crud.user import get_user

router = Router()



@router.callback_query(F.data == 'pay_later')
async def pay_later(callback: CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="profile")]
    ])

    await callback.message.edit_text(
        "üí≥ <b>–û–ü–õ–ê–¢–ê –û–¢–õ–û–ñ–ï–ù–ê</b>\n\n"
        "‚úÖ <i>–í—ã –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –∞—Ä–µ–Ω–¥—É –ø–æ–∑–∂–µ</i>\n\n"
        "üìã <b>–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤:</b>\n"
        "‚ñ´Ô∏è –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç ‚Üí –ú–æ–π —Å–∫—É—Ç–µ—Ä\n"
        "‚ñ´Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—É—â—É—é –∞—Ä–µ–Ω–¥—É\n"
        "‚ñ´Ô∏è –ù–∞–∂–º–∏—Ç–µ \"–û–ø–ª–∞—Ç–∏—Ç—å\"\n\n"
        "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>\n"
        "‚è∞ <i>–í–∞—à–∞ –∞—Ä–µ–Ω–¥–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –¥–µ–Ω—å</i>\n\n"
        "üí° <i>–ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ–ø–ª–∞—Ç—É –≤–æ–≤—Ä–µ–º—è</i>",
        parse_mode='HTML',
        reply_markup=keyboard
    )

@router.callback_query(F.data == 'extend')
async def extend(callback: CallbackQuery, state: FSMContext):

    await state.clear()



    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text='üìÖ 3 –¥–Ω—è', callback_data=f'f"pay_extend-3"'),
            InlineKeyboardButton(text='üìÖ 7 –¥–Ω–µ–π', callback_data=f'f"pay_extend-7')
        ],
        [
            InlineKeyboardButton(text='üìÖ 30 –¥–Ω–µ–π', callback_data=f'f"pay_extend-30')
        ],
        [
            InlineKeyboardButton(text='‚úèÔ∏è –í—ã–±—Ä–∞—Ç—å –≤—Ä—É—á–Ω—É—é', callback_data=f'write_period')
        ],
        [
            InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data=f'extend_back')
        ]
    ])

    await callback.message.edit_text(
        "üèçÔ∏è <b>–í–´–ë–ï–†–ò–¢–ï –°–†–û–ö –ê–†–ï–ù–î–´</b>\n\n"
        "üöÄ <i>–ì–æ—Ç–æ–≤—ã –∫ –ø–æ–µ–∑–¥–∫–µ? –í—ã–±–∏—Ä–∞–π—Ç–µ —É–¥–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥:</i>\n\n"
        "üîπ <b>3 –¥–Ω—è</b> ‚Äî –∏–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∞\n"
        "üîπ <b>7 –¥–Ω–µ–π</b> ‚Äî –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç\n"
        "üîπ <b>30 –¥–Ω–µ–π</b> ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã–≥–æ–¥–∞\n\n"
        "üíé <i>–ù—É–∂–µ–Ω –¥—Ä—É–≥–æ–π —Å—Ä–æ–∫? –£–∫–∞–∂–∏—Ç–µ –≤—Ä—É—á–Ω—É—é</i>",
        parse_mode='HTML',
        reply_markup=keyboard
    )

class SelectPeriodExtend(StatesGroup):
    select_period = State()

@router.callback_query(F.data.split('-')[0] == 'write_period')
async def write_period(callback: CallbackQuery, state: FSMContext):


    await state.set_state(SelectPeriodExtend.select_period)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data=f'extend')
        ]
    ])

    await callback.message.edit_text(
        "‚úèÔ∏è <b>–£–ö–ê–ñ–ò–¢–ï –°–†–û–ö –ê–†–ï–ù–î–´</b>\n\n"
        "üìù <i>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Ü–∏—Ñ—Ä–∞–º–∏:</i>\n"
        "‚Ä¢ –ù–∞–ø—Ä–∏–º–µ—Ä: 3, 5, 7, 10, 14...\n\n"
        "‚ö†Ô∏è <b>–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫:</b> 3 –¥–Ω—è\n"
        "üí° <i>–ß–µ–º –¥–æ–ª—å—à–µ ‚Äî —Ç–µ–º –≤—ã–≥–æ–¥–Ω–µ–µ —Ü–µ–Ω–∞!</i>",
        parse_mode='HTML',
        reply_markup=keyboard
    )

@router.message(SelectPeriodExtend.select_period)
async def confirm_period(message: Message, state: FSMContext):
    msg = message.text



    if msg.isdigit():
        days = int(msg)
        if days >= 3:

            callback_data = f"pay_extend-{days}"

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data=callback_data)
                ],
                [
                    InlineKeyboardButton(text='üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã', callback_data='extend')
                ]
            ])

            await message.answer(
                f"‚è≥ –í—ã —É–∫–∞–∑–∞–ª–∏ —Å—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã: <b>{days} –¥–Ω–µ–π</b>.\n\n"
                f"‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∞—Ä–µ–Ω–¥—É, –ª–∏–±–æ –∏–∑–º–µ–Ω–∏—Ç–µ —Å—Ä–æ–∫.",
                reply_markup=keyboard, parse_mode='HTML')

            await state.clear()
        else:
            await message.answer(
                "‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã ‚Äî <b>3 –¥–Ω—è</b>.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π ‚¨áÔ∏è", parse_mode='HTML'
            )
    else:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Ü–∏—Ñ—Ä–æ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä: <b>5</b>", parse_mode='HTML'
        )




@router.callback_query(F.data == 'extend_back')
async def extend_back(callback: CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–ø–ª–∞—Ç–µ", callback_data="extend")],
        [InlineKeyboardButton(text="‚è≥ –û—Ç–ª–æ–∂–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="pay_later")]
    ])

    await callback.message.edit_text(
        "üìã <b>–í–ù–ò–ú–ê–ù–ò–ï!</b>\n\n"
        "üí° <i>–ï—Å–ª–∏ –ø–µ—Ä–µ–π–¥–µ—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:</i>\n\n"
        "‚úÖ <b>–û–ø–ª–∞—Ç–∞ –æ—Ç–ª–æ–∂–∏—Ç—Å—è</b>\n"
        "‚ñ´Ô∏è –ë—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –¥–æ –∫–æ–Ω—Ü–∞ –∞—Ä–µ–Ω–¥—ã\n\n"
        "‚ö†Ô∏è <b>–ï—Å–ª–∏ –Ω–µ –æ–ø–ª–∞—Ç–∏—Ç–µ –¥–æ –∫–æ–Ω—Ü–∞ –∞—Ä–µ–Ω–¥—ã:</b>\n"
        "‚ñ´Ô∏è –ê—Ä–µ–Ω–¥–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è\n"
        "‚ñ´Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –±—É–¥–µ—Ç –≤–µ—Ä–Ω—É—Ç—å —Å–∫—É—Ç–µ—Ä –Ω–∞ –±–∞–∑—É\n\n",
        parse_mode='HTML',
        reply_markup=keyboard
    )

@router.callback_query(F.data.split('-')[0] == 'pay_extend')
async def payment(callback: CallbackQuery):
    from bot.db.crud.user import get_user

    data = callback.data.split('-')[1]
    tg_id = callback.from_user.id

    user = await get_user(tg_id)
    day, week, month = await get_price(user[4])

    if int(data) < 7:
        price = day
    elif int(data) < 30:
        price = week
    else:
        price = month

    bike_id = user[3]
    order_id = f'order-{uuid.uuid4().hex[:8]}-{bike_id}-{tg_id}'


    created_bill: Bill = await cl.create_bill(
        amount=int(price),
        order_id=order_id,
        currency_in='RUB'
    )




    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text='üí≥ –û–ø–ª–∞—Ç–∏—Ç—å', url=created_bill.link_page_url)],
            [InlineKeyboardButton(text='üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data=f'check_pay-{created_bill.id}')]
        ]
    )
    msg = await callback.message.answer(
        text=f"üí≥ –°—á–µ—Ç –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –Ω–∞ {data} –¥–Ω–µ–π\n"
             f"–°—É–º–º–∞: {price} RUB\n\n"
             f"–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 15 –º–∏–Ω—É—Ç",
        reply_markup=keyboard
    )

    await create_payment(tg_id, order_id, created_bill.id, price, data, msg.message_id)

