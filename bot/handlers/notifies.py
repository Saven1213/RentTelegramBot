from datetime import datetime, timedelta

from aiogram import Router, F, Bot
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Message
from aiogram.fsm.state import State, StatesGroup


from bot.db.crud.admin_msgs import save_admin_msg, get_admin_msgs
from bot.db.crud.debts import get_debts
from bot.db.crud.delays import get_delays_user, delete_delays
from bot.db.crud.equips import get_equips_user, delete_equips
from bot.db.crud.mix_conn import rent_bike
from bot.db.crud.names import get_personal_data
from bot.db.crud.payments.add_fail_status import fail_status
from bot.db.crud.payments.create_payment import create_payment
from bot.db.crud.pledge import get_pledge, delete_pledge
from bot.db.crud.rent_data import get_rent_by_user_id, add_new_status
from bot.db.crud.user import get_all_admins, set_null_status_bike
from cardlink import CardLink
from cardlink._types import Bill
from bot.db.crud.bike import get_price, get_bike_by_id, set_user_null, change_status_is_free

from bot.config import cl

import uuid

# from bot.db.crud.user import get_user

router = Router()



@router.callback_query(F.data.split('-')[0] == 'pay_later')
async def pay_later(callback: CallbackQuery):

    tg_id = callback.from_user.id

    data = callback.data.split('-')[1]

    if data != 'none':
        await fail_status(data)

    data_rent = await get_rent_by_user_id(tg_id)
    end_time = data_rent[5]

    formated = datetime.fromisoformat(end_time) + timedelta(hours=3)


    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="profile")]
    ])

    await callback.message.edit_text(
        "üí≥ <b>–û–ü–õ–ê–¢–ê –û–¢–õ–û–ñ–ï–ù–ê</b>\n\n"
        "‚úÖ <i>–í—ã –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –∞—Ä–µ–Ω–¥—É –ø–æ–∑–∂–µ</i>\n\n"
        "üìã <b>–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤:</b>\n"
        "‚ñ´Ô∏è –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç ‚Üí –ú–æ–π —Å–∫—É—Ç–µ—Ä\n"
        "‚ñ´Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—É—â—É—é –∞—Ä–µ–Ω–¥—É\n"
        "‚ñ´Ô∏è –ù–∞–∂–º–∏—Ç–µ \"–û–ø–ª–∞—Ç–∏—Ç—å\"\n\n"
        "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>\n"
       f"‚è∞ <i>–í–∞—à–∞ –∞—Ä–µ–Ω–¥–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è: </i><b>{str(formated).split('.')[0]}</b>\n\n"
        "üí° <i>–ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ–ø–ª–∞—Ç—É –≤–æ–≤—Ä–µ–º—è</i>",
        parse_mode='HTML',
        reply_markup=keyboard
    )

@router.callback_query(F.data == 'extend')
async def extend(callback: CallbackQuery, state: FSMContext):

    await state.clear()



    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text='üìÖ 3 –¥–Ω—è', callback_data=f'pay_extend-3'),
            InlineKeyboardButton(text='üìÖ 7 –¥–Ω–µ–π', callback_data=f'pay_extend-7')
        ],
        [
            InlineKeyboardButton(text='üìÖ 30 –¥–Ω–µ–π', callback_data=f'pay_extend-30')
        ],
        [
            InlineKeyboardButton(text='‚úèÔ∏è –í—ã–±—Ä–∞—Ç—å –≤—Ä—É—á–Ω—É—é', callback_data=f'write_time')
        ],
        [
            InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data=f'extend_back')
        ]
    ])

    await callback.message.edit_text(
        "üèçÔ∏è <b>–í–´–ë–ï–†–ò–¢–ï –°–†–û–ö –ê–†–ï–ù–î–´</b>\n\n"
        "üöÄ <i>–ì–æ—Ç–æ–≤—ã –∫ –ø–æ–µ–∑–¥–∫–µ? –í—ã–±–∏—Ä–∞–π—Ç–µ —É–¥–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥:</i>\n\n"
        "üîπ <b>3 –¥–Ω—è</b> ‚Äî –∏–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∞\n"
        "üîπ <b>7 –¥–Ω–µ–π</b> ‚Äî –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç\n"
        "üîπ <b>30 –¥–Ω–µ–π</b> ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã–≥–æ–¥–∞\n\n"
        "üíé <i>–ù—É–∂–µ–Ω –¥—Ä—É–≥–æ–π —Å—Ä–æ–∫? –£–∫–∞–∂–∏—Ç–µ –≤—Ä—É—á–Ω—É—é</i>",
        parse_mode='HTML',
        reply_markup=keyboard
    )

class SelectPeriodExtend(StatesGroup):
    select_period = State()

@router.callback_query(F.data == 'write_time')
async def write_period(callback: CallbackQuery, state: FSMContext):

    # try:
    #     await callback.message.delete()
    # except TelegramBadRequest:
    #     pass


    await state.set_state(SelectPeriodExtend.select_period)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data=f'extend')
        ]
    ])

    await callback.message.edit_text(
        "‚úèÔ∏è <b>–£–ö–ê–ñ–ò–¢–ï –°–†–û–ö –ê–†–ï–ù–î–´</b>\n\n"
        "üìù <i>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Ü–∏—Ñ—Ä–∞–º–∏:</i>\n"
        "‚Ä¢ –ù–∞–ø—Ä–∏–º–µ—Ä: 3, 5, 7, 10, 14...\n\n"
        "‚ö†Ô∏è <b>–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫:</b> 3 –¥–Ω—è\n"
        "üí° <i>–ß–µ–º –¥–æ–ª—å—à–µ ‚Äî —Ç–µ–º –≤—ã–≥–æ–¥–Ω–µ–µ —Ü–µ–Ω–∞!</i>",
        parse_mode='HTML',
        reply_markup=keyboard
    )

@router.message(SelectPeriodExtend.select_period)
async def confirm_period(message: Message, state: FSMContext):
    msg = message.text



    if msg.isdigit():

        days = int(msg)

        if days < 36500:
            if days >= 3:

                callback_data = f"pay_extend-{days}"

                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data=callback_data)
                    ],
                    [
                        InlineKeyboardButton(text='üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã', callback_data='extend')
                    ]
                ])

                await message.answer(
                    f"‚è≥ –í—ã —É–∫–∞–∑–∞–ª–∏ —Å—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã: <b>{days} –¥–Ω–µ–π</b>.\n\n"
                    f"‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∞—Ä–µ–Ω–¥—É, –ª–∏–±–æ –∏–∑–º–µ–Ω–∏—Ç–µ —Å—Ä–æ–∫.",
                    reply_markup=keyboard, parse_mode='HTML')

                await state.clear()
            else:
                await message.answer(
                    "‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã ‚Äî <b>3 –¥–Ω—è</b>.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π ‚¨áÔ∏è", parse_mode='HTML'
                )
        else:
            await message.answer('‚õî –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –±–æ–ª—å—à–µ —á–µ–º –Ω–∞ 100 –ª–µ—Ç!')
    else:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Ü–∏—Ñ—Ä–æ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä: <b>5</b>", parse_mode='HTML'
        )




@router.callback_query(F.data == 'extend_back')
async def extend_back(callback: CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–ø–ª–∞—Ç–µ", callback_data="extend")],
        [InlineKeyboardButton(text="‚è≥ –û—Ç–ª–æ–∂–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="pay_later-none")]
    ])

    await callback.message.edit_text(
        "üìã <b>–í–ù–ò–ú–ê–ù–ò–ï!</b>\n\n"
        "üí° <i>–ï—Å–ª–∏ –ø–µ—Ä–µ–π–¥–µ—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:</i>\n\n"
        "‚úÖ <b>–û–ø–ª–∞—Ç–∞ –æ—Ç–ª–æ–∂–∏—Ç—Å—è</b>\n"
        "‚ñ´Ô∏è –ë—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –¥–æ –∫–æ–Ω—Ü–∞ –∞—Ä–µ–Ω–¥—ã\n\n"
        "‚ö†Ô∏è <b>–ï—Å–ª–∏ –Ω–µ –æ–ø–ª–∞—Ç–∏—Ç–µ –¥–æ –∫–æ–Ω—Ü–∞ –∞—Ä–µ–Ω–¥—ã:</b>\n"
        "‚ñ´Ô∏è –ê—Ä–µ–Ω–¥–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è\n"
        "‚ñ´Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –±—É–¥–µ—Ç –≤–µ—Ä–Ω—É—Ç—å —Å–∫—É—Ç–µ—Ä –Ω–∞ –±–∞–∑—É\n\n",
        parse_mode='HTML',
        reply_markup=keyboard
    )

@router.callback_query(F.data.split('-')[0] == 'pay_extend')
async def payment(callback: CallbackQuery):
    from bot.db.crud.user import get_user

    try:
        await callback.message.delete()
    except TelegramBadRequest:
        pass

    data = callback.data.split('-')[1]
    tg_id = callback.from_user.id

    user = await get_user(tg_id)
    day, week, month = await get_price(user[3])

    if int(data) < 7:
        price = day * int(data)
    elif int(data) < 30:
        price = week * int(data)
    else:
        price = month * int(data)

    if int(data) == 1:
        text_time = "1 –¥–µ–Ω—å"
    elif int(data) < 5:
        text_time = f"{data} –¥–Ω—è"
    else:
        text_time = f"{data} –¥–Ω–µ–π"

    bike_id = user[3]
    order_id = f'order-{uuid.uuid4().hex[:8]}-{bike_id}-{tg_id}'


    created_bill: Bill = await cl.create_bill(
        amount=int(price),
        order_id=order_id,
        currency_in='RUB'
    )




    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text='üí≥ –û–ø–ª–∞—Ç–∏—Ç—å', url=created_bill.link_page_url)],
            [InlineKeyboardButton(text='‚è≥ –û—Ç–ª–æ–∂–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data=f'pay_later-{order_id}')]
        ]
    )
    msg = await callback.message.answer(
        text=f"üí≥ –°—á–µ—Ç –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –Ω–∞ {data} –¥–Ω–µ–π\n"
             f"–°—É–º–º–∞: {price} RUB\n\n"
             f"–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 15 –º–∏–Ω—É—Ç",
        reply_markup=keyboard
    )

    await create_payment(tg_id, order_id, created_bill.id, price, data, msg.message_id, f'–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã –Ω–∞ {text_time}!')

@router.callback_query(F.data == 'cancel_pay_rent')
async def cancel(callback: CallbackQuery):
    tg_id = callback.from_user.id

    data_rent = await get_rent_by_user_id(tg_id)
    end_time = data_rent[5]

    formated = str(datetime.fromisoformat(end_time) + timedelta(hours=3))

    text = (
        f"<code>‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê</code>\n"
        f"<b>  üèÅ –ê–†–ï–ù–î–ê –ó–ê–í–ï–†–®–ï–ù–ê  </b>\n"
        f"<code>‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§</code>\n"
        f"<b>‚îÇ</b> ‚è∞ <b>–°–¥–∞—Ç—å –¥–æ:</b> {formated.split('.')[0]}\n"
        f"<b>‚îÇ</b> üìç <b>–ê–¥—Ä–µ—Å:</b> –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä\n"
        f"<b>‚îÇ</b> ‚ñ´Ô∏è —É–ª. –ö–æ—Ä–Ω–∏—Ü–∫–æ–≥–æ, 47\n"
        f"<code>‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îõ</code>\n\n"
        f"üìã <b>–ü–∞–º—è—Ç–∫–∞:</b>\n"
        f"‚ñ´Ô∏è <b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b> - –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª—å\n"
        f"‚ñ´Ô∏è <b>–°–¥–∞—Ç—å —Å–∫—É—Ç–µ—Ä</b> - –Ω–∞–∂–º–∏—Ç–µ –ø—Ä–∏ —Å–¥–∞—á–µ –Ω–∞ –±–∞–∑–µ\n\n"
        f"üíö <i>–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –≤—ã–±–æ—Ä <b>–•–∞–ª–∫ –±–∞–π–∫!</b></i>"
    )

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìç –ì–¥–µ –±–∞–∑–∞?", url="https://maps.yandex.ru/?text=–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä, –ö–æ—Ä–Ω–∏—Ü–∫–æ–≥–æ 47")],
            [InlineKeyboardButton(text="üìä –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="profile")],
            [InlineKeyboardButton(text="üõµ –°–¥–∞—Ç—å —Å–∫—É—Ç–µ—Ä", callback_data=f"return_bike_confirm-{data_rent[0]}")]
        ]
    )



    await callback.message.edit_text(
        text=text,
        reply_markup=keyboard,
        parse_mode='HTML'
    )



@router.callback_query(F.data.split('-')[0] == 'return_bike_confirm')
async def return_bike(callback: CallbackQuery, bot: Bot):
    rent_id = callback.data.split('-')[1]
    tg_id = callback.from_user.id
    rent = await get_rent_by_user_id(tg_id)

    debts = await get_debts(tg_id)
    if not debts:
        pd = await get_personal_data(tg_id)


        bike = await get_bike_by_id(rent[2])

        bike_model = bike[2]
        bike_id = bike[1]

        keyboard_admin = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data=f'confirm_return_bike-{bike[0]}-{tg_id}'),
                    InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data=f'cancel_return_bike-{tg_id}')
                ]
            ]
        )

        full_name = f'{pd[2]} {pd[3]}'

        text_admin = (
            f"üõµ <b>–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –í–û–ó–í–†–ê–¢ –°–ö–£–¢–ï–†–ê</b>\n\n"
            f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {full_name}\n"
            f"üÜî <b>ID:</b> <code>{tg_id}</code>\n"
            f"üèç <b>–°–∫—É—Ç–µ—Ä:</b> {bike_model} (#{bike_id})\n\n"
            f"‚úÖ <i>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–æ–∑–≤—Ä–∞—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∫—É—Ç–µ—Ä–∞</i>"
        )


        admins = await get_all_admins()

        for admin in admins:
            admin_msg = await bot.send_message(chat_id=admin[1], text=text_admin, reply_markup=keyboard_admin, parse_mode='HTML')

            await save_admin_msg(user_id=tg_id, msg_id=admin_msg.message_id, admin_chat_id=admin[1], type_='return_bike')

        user_text = (
            '‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É'
        )

        await callback.message.edit_text(text=user_text)

    else:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∏—Ç—å –¥–æ–ª–≥–∏', callback_data='my_debts')
                ]
            ]
        )

        text = (
            "üìã <b>–ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê</b>\n\n"
            "üí° <i>–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å</i>\n\n"
            "‚ú® <b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å?</b>\n"
            "‚ñ´Ô∏è –û–ø–ª–∞—Ç–∏—Ç–µ –¥–æ–ª–≥ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ\n"
            "‚ñ´Ô∏è –≠—Ç–æ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ 2 –º–∏–Ω—É—Ç—ã\n"
            "‚ñ´Ô∏è –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å–º–æ–∂–µ—Ç–µ —Å–¥–∞—Ç—å —Å–∫—É—Ç–µ—Ä\n\n"
            "üõ°Ô∏è <b>–ù–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å!</b>\n"
            "‚ñ´Ô∏è –≠—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∞\n"
            "‚ñ´Ô∏è –ú—ã –ø–æ–º–æ–∂–µ–º —Ä–µ—à–∏—Ç—å –≤–æ–ø—Ä–æ—Å\n"
            "‚ñ´Ô∏è –°–∫—É—Ç–µ—Ä –±—É–¥–µ—Ç –∂–¥–∞—Ç—å –≤–∞—Å –Ω–∞ –±–∞–∑–µ\n\n"
            "üíö <i>–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ!</i>"
        )

        await callback.message.edit_text(text=text, reply_markup=keyboard, parse_mode='HTML')

@router.callback_query(F.data.split('-')[0] == 'confirm_return_bike')
async def c_return_bike(callback: CallbackQuery, bot: Bot):
    bike_id = callback.data.split('-')[1]



    user_id = callback.data.split('-')[2]

    admin_msgs = await get_admin_msgs(user_id=int(user_id))

    for admin_chat_id, msg_id, type_ in admin_msgs:
        if type_ == 'return_bike':
            try:
                await bot.delete_message(chat_id=admin_chat_id, message_id=msg_id)
            except TelegramBadRequest:
                pass

    equips = await get_equips_user(user_id)

    available_equip_lst = []
    try:
        for i, equip in enumerate(equips):
            equip_str = str(equip) if equip is not None else '0'
            match (i, equip_str):
                case (2, '1'):
                    available_equip_lst.append("—à–ª–µ–º")
                case (3, '1'):
                    available_equip_lst.append("—Ü–µ–ø—å")
                case (4, '1'):
                    available_equip_lst.append("—Ç–µ—Ä–º–æ–∫–æ—Ä–æ–±")
                case (5, '1'):
                    available_equip_lst.append("–±–∞–≥–∞–∂–Ω–∏–∫")
                case (6, '1'):
                    available_equip_lst.append("—Ä–µ–∑–∏–Ω–∫–∞")
                case (7, '1'):
                    available_equip_lst.append("–¥–µ—Ä–∂–∞—Ç–µ–ª—å")
                case (8, '1'):
                    available_equip_lst.append("–∑–∞—Ä—è–¥–∫–∞")
                case (0, '1') | (1, '1'):
                    continue
                case (_, '1'):
                    available_equip_lst.append(f"–≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞ #{i + 1}")
                case (_, '0'):
                    continue
    except TypeError:
        available_equip_lst = []


    text = (
        "üõ°Ô∏è <b>–≠–ö–ò–ü–ò–†–û–í–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø</b>\n\n"
        "üìã <b>–î–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å:</b>\n"
    )

    if available_equip_lst:
        for item in available_equip_lst:
            text += f"‚ñ´Ô∏è {item.capitalize()}\n"
    else:
        text += "‚ñ´Ô∏è –≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞ –Ω–µ –≤—ã–¥–∞–≤–∞–ª–∞—Å—å\n\n"

    text += (
        "\n‚úÖ <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∏ –ø—Ä–∏–µ–º–∫–µ:</b>\n"
        "‚ñ´Ô∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏\n"
        "‚ñ´Ô∏è –ö–æ–º–ø–ª–µ–∫—Ç–Ω–æ—Å—Ç—å\n"
        "‚ñ´Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π\n\n"

    )

    delays = await get_delays_user(user_id)

    if delays:
        text += (
            '‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è <b>–ü–†–û–°–†–û–ß–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø</b> ‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è\n'
            f'  –°—É–º–º–∞: {delays[4]}'
        )

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text='‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∏–ª', callback_data=f'check_pledge-{bike_id}-{user_id}'),
                InlineKeyboardButton(text='‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å —Å–¥–∞—á—É', callback_data=f'cancel_return_bike-{user_id}')
            ]
        ]
    )


    await callback.message.answer(text=text, reply_markup=keyboard, parse_mode='HTML')


@router.callback_query(F.data.split('-')[0] == 'check_pledge')
async def check_pledge(callback: CallbackQuery):
    bike_id = callback.data.split('-')[1]
    user_id = callback.data.split('-')[2]

    pledge = await get_pledge(int(user_id))

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                                  callback_data=f'success_equip-{bike_id}-{user_id}')]
        ]
    )

    await delete_equips(user_id)

    if pledge:
        text = (
            "üí∞ <b>–ó–ê–õ–û–ì –ö –í–û–ó–í–†–ê–¢–£</b>\n\n"
            
            f"üíµ <b>–°—É–º–º–∞ –∑–∞–ª–æ–≥–∞:</b> {int(pledge[3])} ‚ÇΩ\n\n"
            
            "üí° <i>–ü–æ—Å–ª–µ –≤—ã–¥–∞—á–∏ –Ω–∞–∂–º–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</i>"
        )


    else:
        text = (
            "üí∞ <b>–ü–†–û–í–ï–†–ö–ê –ó–ê–õ–û–ì–ê</b>\n\n"
            "‚ö†Ô∏è <b>–ó–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"
        )



    await callback.message.edit_text(
        text=text,
        parse_mode='HTML',
        reply_markup=keyboard
    )




@router.callback_query(F.data.split('-')[0] == 'success_equip')
async def end_rent(callback: CallbackQuery, bot: Bot):
    bike_id = callback.data.split('-')[1]
    user_id = callback.data.split('-')[2]
    text = (
        "üîß <b>–§–ò–ù–ê–õ–¨–ù–´–ô –û–°–ú–û–¢–†</b>\n\n"
        "üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–ø–µ–¥–∞:\n"
        "‚ñ´Ô∏è –¶–∞—Ä–∞–ø–∏–Ω—ã –∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è\n"
        "‚ñ´Ô∏è –ò—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è\n"
        "‚ñ´Ô∏è –î–æ–∫—É–º–µ–Ω—Ç—ã –∏ –∫–ª—é—á–∏\n\n"
    )

    pledge = await get_pledge(int(user_id))

    if pledge:
        await delete_pledge(int(user_id))




    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç', callback_data=f'complete_rent-{user_id}-{bike_id}')
            ]
        ]
    )

    await callback.message.edit_text(text=text, reply_markup=keyboard, parse_mode='HTML')




@router.callback_query(F.data.split('-')[0] == 'complete_rent')
async def complete_rent(callback: CallbackQuery, bot: Bot):
    user_id = callback.data.split('-')[1]

    delays = await get_delays_user(user_id)





    bike_id = callback.data.split('-')[2]

    order_id = f'order-{uuid.uuid4().hex[:8]}-{bike_id}-{user_id}'



    if delays:
        description = f'–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—Å—Ä–æ—á–∫–∏ –Ω–∞ {delays[4]} —Ä'
        await delete_delays(tg_id=user_id)
        await create_payment(tg_id=user_id, order_id=order_id, id_='hands', price=delays[4], time=0, message_id='none', description=description, status='success')

    await add_new_status(user_id=int(user_id), status='unactive')

    user_text = (
        "üèÅ <b>–ê–†–ï–ù–î–ê –ó–ê–í–ï–†–®–ï–ù–ê</b>\n\n"
        "‚úÖ <i>–°–∫—É—Ç–µ—Ä —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω</i>\n\n"
        "üíö <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –∞—Ä–µ–Ω–¥—É!</b>\n"
        "‚ñ´Ô∏è –ñ–¥–µ–º –≤–∞—Å —Å–Ω–æ–≤–∞ –≤ –•–∞–ª–∫ –ë–∞–π–∫\n\n"
    )

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main")]
        ]
    )

    pd = await get_personal_data(user_id)
    full_name = f'{pd[2]} {pd[3]}'
    bike = await get_bike_by_id(bike_id)
    admin_text = (
        "üìã <b>–ê–†–ï–ù–î–ê –ó–ê–í–ï–†–®–ï–ù–ê</b>\n\n"
        f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {full_name}\n"
        f"üèç <b>–°–∫—É—Ç–µ—Ä:</b> {bike[2]} #{bike[1]}\n\n"
    )


    await set_user_null(bike_id)

    await callback.message.edit_text(
        text=admin_text,
        parse_mode='HTML',
        reply_markup=keyboard
    )

    await change_status_is_free(bike_id)

    await bot.send_message(chat_id=user_id, text=user_text, reply_markup=keyboard, parse_mode='HTML')

    await set_null_status_bike(user_id)



@router.callback_query(F.data.split('-')[0] == 'cancel_return_bike')
async def cancel_return_bike(
        callback: CallbackQuery,
        bot: Bot
):
    user_id = callback.data.split('-')[1]

    admin_msgs = await get_admin_msgs(user_id=int(user_id))

    for admin_chat_id, msg_id, type_ in admin_msgs:
        if type_ == 'return_bike':
            try:
                await bot.delete_message(chat_id=admin_chat_id, message_id=msg_id)
            except TelegramBadRequest:
                pass

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text='üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main')
            ]
        ]
    )


    await bot.send_message(chat_id=user_id, text='‚ùå –ê–¥–º–∏–Ω –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞—è–≤–∫—É', reply_markup=keyboard)









