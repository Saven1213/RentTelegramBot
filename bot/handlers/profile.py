import re
from gettext import textdomain

from aiogram import Router, F, Bot
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message

from bot.db.crud.bike import get_bike_by_id
from bot.db.crud.mix_conn import get_user_and_data
from bot.db.crud.names import get_personal_data, add_personal_data
from bot.db.crud.photos.map import get_map
from bot.db.crud.user import get_user

router = Router()


@router.callback_query(F.data == 'profile')
async def profile(callback: CallbackQuery, state: FSMContext, bot: Bot):
    tg_id = callback.from_user.id

    data = await state.get_data()
    try:
        if data['msg_for_del']:
            await bot.delete_message(chat_id=tg_id, message_id=data['msg_for_del'])
    except KeyError:
        pass

    await state.clear()



    user, personal_data = await get_user_and_data(tg_id)

    if personal_data:
        name = f"{personal_data[-3]} {personal_data[-2]}" if personal_data[-3] else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    else:
        name = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"


    keyboard_rows = []

    if user[3] != 'null' and user[3] is not None:

        keyboard_rows.extend([
            [InlineKeyboardButton(text="üèçÔ∏è –ú–æ–π —Å–∫—É—Ç–µ—Ä", callback_data="my_scooter")],
            [InlineKeyboardButton(text="üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ –±–∞–π–∫", callback_data="documents")],
            [InlineKeyboardButton(text="üó∫Ô∏è –ö–∞—Ä—Ç–∞ –≥—Ä–∞–Ω–∏—Ü", callback_data="city_map")],
            [
                InlineKeyboardButton(text="üõ°Ô∏è –≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞", callback_data="equips"),
                InlineKeyboardButton(text="üí∞ –î–æ–ª–≥–∏", callback_data="depts")
            ],
            [InlineKeyboardButton(text="üìä –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π", callback_data="history_my_payments")]
        ])

        if personal_data is None:
            keyboard_rows.append([InlineKeyboardButton(text="üìù –ê–Ω–∫–µ—Ç–∞", callback_data="action")])

    else:

        keyboard_rows.append([InlineKeyboardButton(text="üèçÔ∏è –ú–æ–π —Å–∫—É—Ç–µ—Ä", callback_data="my_scooter")])

        if personal_data is None:
            keyboard_rows.append([InlineKeyboardButton(text="üìù –ê–Ω–∫–µ—Ç–∞", callback_data="action")])


    keyboard_rows.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main")])

    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)


    profile_text = f"""
üë§ <b>–ú–û–ô –ü–†–û–§–ò–õ–¨</b>

üìã <b>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>

‚îú üîπ –ò–º—è: {name}
‚îî üîπ ID: <code>{tg_id}</code>

üíé <i>–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º–∏ –∞—Ä–µ–Ω–¥–∞–º–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏</i>
"""
    try:
        msg_for_del = await callback.message.edit_text(
            text=profile_text,
            parse_mode='HTML',
            reply_markup=keyboard
        )
    except TelegramBadRequest:
        msg_for_del = await callback.message.answer(
            text=profile_text,
            parse_mode='HTML',
            reply_markup=keyboard
        )

    await state.update_data(msg_for_del=msg_for_del.message_id)


class Action(StatesGroup):
    first_name = State()
    last_name = State()
    number = State()


NAME_RE = re.compile(r"^[A-Za-z–ê-–Ø–∞-—è–Å—ë\-]+$")

def back_kb():
    return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîÑ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞", callback_data="action")]])

def normalize_phone(raw: str) -> str | None:
    s = (raw or "").strip()
    s = s.replace("(", "").replace(")", "").replace(" ", "").replace("-", "")
    if s.startswith("+"):
        if s.startswith("+7") and s[1:].isdigit() and len(s) == 12:
            return s
        return None
    if s.isdigit():
        if s.startswith("8") and len(s) == 11:
            return "+7" + s[1:]
        if s.startswith("7") and len(s) == 11:
            return "+7" + s[1:]
    return None




@router.callback_query(lambda c: c.data == "action")
async def action_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Action.first_name)
    msg = await callback.message.edit_text(
        "–î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è! ‚úçÔ∏è\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ <b>–∏–º—è</b> (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã):",
        parse_mode="HTML"
    )
    await state.update_data(msg1=msg.message_id)


@router.message(Action.first_name)
async def action_fn(message: Message, state: FSMContext, bot: Bot):
    msg_text = (message.text or "").strip()
    if not NAME_RE.fullmatch(msg_text):
        await message.answer(
            "–ò–º—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –¥–µ—Ñ–∏—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:",
            reply_markup=back_kb()
        )
        return


    data = await state.get_data()
    tg_id = message.from_user.id
    msg_user1 = message.message_id


    await state.set_state(Action.last_name)
    msg2 = await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É <b>—Ñ–∞–º–∏–ª–∏—é</b> (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã):",
        parse_mode="HTML",
        reply_markup=back_kb()
    )
    await state.update_data(first_name=msg_text.capitalize(), msg2=msg2.message_id)


    try:
        await bot.delete_message(chat_id=tg_id, message_id=data['msg1'])
    except:
        pass
    try:
        await bot.delete_message(chat_id=tg_id, message_id=msg_user1)
    except:
        pass


@router.message(Action.last_name)
async def action_ln(message: Message, state: FSMContext, bot: Bot):
    msg_text = (message.text or "").strip()
    if not NAME_RE.fullmatch(msg_text):
        await message.answer(
            "–§–∞–º–∏–ª–∏—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –¥–µ—Ñ–∏—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:",
            reply_markup=back_kb()
        )
        return

    data = await state.get_data()
    tg_id = message.from_user.id
    msg_user2 = message.message_id


    await state.set_state(Action.number)
    msg3 = await message.answer(
        "–•–æ—Ä–æ—à–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>.\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã: <code>89182223455</code>, <code>+79284569475</code>, <code>+7-918-037-84-28</code>",
        parse_mode="HTML",
        reply_markup=back_kb()
    )
    await state.update_data(last_name=msg_text.capitalize(), msg3=msg3.message_id)


    try:
        await bot.delete_message(chat_id=tg_id, message_id=data['msg2'])
    except:
        pass
    try:
        await bot.delete_message(chat_id=tg_id, message_id=msg_user2)
    except:
        pass

# –í–≤–æ–¥ –Ω–æ–º–µ—Ä–∞
@router.message(Action.number)
async def action_number(message: Message, state: FSMContext, bot: Bot):
    tg_id = message.from_user.id
    normalized = normalize_phone(message.text)
    msg_user3 = message.message_id


    try:
        await bot.delete_message(chat_id=tg_id, message_id=msg_user3)
    except Exception as e:
        pass

    if not normalized:
        await message.answer(
            "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n\n"
            "–î–æ–ø—É—Å—Ç–∏–º—ã–µ –ø—Ä–∏–º–µ—Ä—ã: <code>89182223455</code>, <code>+79284569475</code>, <code>+7-918-037-84-28</code>",
            parse_mode="HTML",
            reply_markup=back_kb()
        )
        return

    data = await state.get_data()
    first_name = data.get("first_name", "")
    last_name  = data.get("last_name", "")

    await add_personal_data(tg_id, first_name, last_name, normalized)
    await state.clear()

    kb_done = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main")]]
    )

    await bot.delete_message(chat_id=tg_id, message_id=data['msg3'])
    await message.answer(
        f"üéâ –û—Ç–ª–∏—á–Ω–æ, {first_name} {last_name}!\n\n"
        "–ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –≤ <b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b> –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å üöÄ",
        parse_mode="HTML",
        reply_markup=kb_done
    )

@router.callback_query(F.data == 'city_map')
async def city_map(callback: CallbackQuery, bot: Bot, state: FSMContext):

    tg_id = callback.from_user.id

    msg_del = await state.get_data()

    await bot.delete_message(chat_id=tg_id, message_id=msg_del['msg_for_del'])

    file_id = await get_map()

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data=f'profile')
            ]
        ]
    )

    msg_for_del = await callback.message.answer_photo(photo=file_id, caption=(
        "üöß <b>–ì—Ä–∞–Ω–∏—Ü—ã –∑–æ–Ω—ã</b>\n"
        "‚ñ´Ô∏è –ó–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ - —Å–∫—É—Ç–µ—Ä –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è"
    ),
    parse_mode='HTML', reply_markup=keyboard)

    await state.clear()

    await state.update_data(msg_for_del=msg_for_del.message_id)


@router.callback_query(F.data == 'my_scooter')
async def my_scooter(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    tg_id = callback.from_user.id
    user = await get_user(tg_id)
    pd = await get_personal_data(tg_id)

    if user[3] is None or user[3] == 'null':

        if pd:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='üõµ –ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å —Å–∫—É—Ç–µ—Ä', callback_data='scooter')],
                [InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='profile')]
            ])
            await callback.message.edit_text(
                'üö´ <b>–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∞—Ä–µ–Ω–¥—ã</b>\n\n'
                'üí° –í—ã –º–æ–∂–µ—Ç–µ –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å —Å–∫—É—Ç–µ—Ä –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!',
                parse_mode='HTML',
                reply_markup=keyboard
            )
        else:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É', callback_data='action')],
                [InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='profile')]
            ])
            await callback.message.edit_text(
                'üìã <b>–ê–Ω–∫–µ—Ç–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞</b>\n\n'
                'üìù –î–ª—è –∞—Ä–µ–Ω–¥—ã —Å–∫—É—Ç–µ—Ä–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É',
                parse_mode='HTML',
                reply_markup=keyboard
            )

    else:

        bike = await get_bike_by_id(user[3])
        next_oil_change = f'{bike[4] + 3000}  –∫–º' if bike[4] else "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
        last_oil_change = f'{bike[4]}  –∫–º' or "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã', callback_data='documents')],
            [InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='profile')]
        ])

        await callback.message.edit_text(
            f'üèç <b>–í–ê–® –°–ö–£–¢–ï–†</b>\n\n'
            f'<code>‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê</code>\n'
            f'<b>‚îÇ</b> üèç <b>–ú–æ–¥–µ–ª—å:</b> {bike[2]}\n'
            f'<b>‚îÇ</b> üîß <b>–ó–∞–º–µ–Ω–∞ –º–∞—Å–ª–∞:</b> {last_oil_change}\n'
            f'<b>‚îÇ</b> ‚è∞ <b>–°–ª–µ–¥—É—é—â–∞—è –∑–∞–º–µ–Ω–∞:</b> {next_oil_change[0], next_oil_change[1]}\n'
            f'<code>‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îõ</code>\n\n'
            f'üí° <i>–£–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤–∞—à–µ–π –∞—Ä–µ–Ω–¥–æ–π</i>',
            parse_mode='HTML',
            reply_markup=keyboard
        )




