import re

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message

from bot.db.crud.mix_conn import get_user_and_data
from bot.db.crud.names import get_personal_data, add_personal_data
from bot.db.crud.user import get_user

router = Router()


@router.callback_query(F.data == 'profile')
async def profile(callback: CallbackQuery):
    tg_id = callback.from_user.id

    user, personal_data = await get_user_and_data(tg_id)

    if personal_data:
        name = f"{personal_data[-3]} {personal_data[-2]}" if personal_data[-3] else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    else:
        name = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"


    keyboard_rows = []

    if user[3] != 'null' and user[3] is not None:

        keyboard_rows.extend([
            [InlineKeyboardButton(text="üèçÔ∏è –ú–æ–π —Å–∫—É—Ç–µ—Ä", callback_data="my_scooter")],
            [InlineKeyboardButton(text="üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ –±–∞–π–∫", callback_data="documents")],
            [InlineKeyboardButton(text="üó∫Ô∏è –ö–∞—Ä—Ç–∞ –≥—Ä–∞–Ω–∏—Ü", callback_data="city_map")],
            [
                InlineKeyboardButton(text="üõ°Ô∏è –≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞", callback_data="equips"),
                InlineKeyboardButton(text="üí∞ –î–æ–ª–≥–∏", callback_data="depts")
            ],
            [InlineKeyboardButton(text="üìä –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π", callback_data="history_my_payments")]
        ])

        if personal_data is None:
            keyboard_rows.append([InlineKeyboardButton(text="üìù –ê–Ω–∫–µ—Ç–∞", callback_data="action")])

    else:

        keyboard_rows.append([InlineKeyboardButton(text="üèçÔ∏è –ú–æ–π —Å–∫—É—Ç–µ—Ä", callback_data="my_scooter")])

        if personal_data is None:
            keyboard_rows.append([InlineKeyboardButton(text="üìù –ê–Ω–∫–µ—Ç–∞", callback_data="action")])


    keyboard_rows.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main")])

    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)


    profile_text = f"""
üë§ <b>–ú–û–ô –ü–†–û–§–ò–õ–¨</b>

üìã <b>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚îú üîπ Username: @{user[2] or '–ù–µ —É–∫–∞–∑–∞–Ω'}
‚îú üîπ –ò–º—è: {name}
‚îî üîπ ID: <code>{tg_id}</code>

üíé <i>–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º–∏ –∞—Ä–µ–Ω–¥–∞–º–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏</i>
"""

    await callback.message.edit_text(
        text=profile_text,
        parse_mode='HTML',
        reply_markup=keyboard
    )

class Action(StatesGroup):
    first_name = State()
    last_name = State()
    number = State()


def back_kb():

    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üîÑ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞", callback_data="action")]]
    )

@router.callback_query(F.data == "action")
async def action_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Action.first_name)
    await callback.message.edit_text(
        "–î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è! ‚úçÔ∏è\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ <b>–∏–º—è</b> (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã):",
        parse_mode="HTML",
        reply_markup=back_kb()
    )

NAME_RE = re.compile(r"^[A-Za-z–ê-–Ø–∞-—è–Å—ë\-]+$")  # –±—É–∫–≤—ã + –¥–µ—Ñ–∏—Å

@router.message(Action.first_name)
async def action_fn(message: Message, state: FSMContext):
    msg = (message.text or "").strip()

    if not NAME_RE.fullmatch(msg):
        await message.answer(
            "–ò–º—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –¥–µ—Ñ–∏—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:",
            reply_markup=back_kb()
        )
        return

    await state.update_data(first_name=msg.capitalize())
    await state.set_state(Action.last_name)
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É <b>—Ñ–∞–º–∏–ª–∏—é</b> (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã):",
        parse_mode="HTML",
        reply_markup=back_kb()
    )

@router.message(Action.last_name)
async def action_ln(message: Message, state: FSMContext):
    msg = (message.text or "").strip()

    if not NAME_RE.fullmatch(msg):
        await message.answer(
            "–§–∞–º–∏–ª–∏—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –¥–µ—Ñ–∏—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:",
            reply_markup=back_kb()
        )
        return

    await state.update_data(last_name=msg.capitalize())
    await state.set_state(Action.number)
    await message.answer(
        "–•–æ—Ä–æ—à–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>.\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã: <code>89182223455</code>, <code>+79284569475</code>, <code>+7-918-037-84-28</code>",
        parse_mode="HTML",
        reply_markup=back_kb()
    )

def normalize_phone(raw: str) -> str | None:
    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã/—Å–∫–æ–±–∫–∏/–¥–µ—Ñ–∏—Å—ã
    s = (raw or "").strip()
    s = s.replace("(", "").replace(")", "").replace(" ", "").replace("-", "")
    # –î–æ–ø—É—Å–∫–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—ã: 8XXXXXXXXXX, +7XXXXXXXXXX, 7XXXXXXXXXX
    if s.startswith("+"):
        if s.startswith("+7") and s[1:].isdigit() and len(s) == 12:
            return s
        return None
    if s.isdigit():
        if s.startswith("8") and len(s) == 11:
            return "+7" + s[1:]
        if s.startswith("7") and len(s) == 11:
            return "+7" + s[1:]
    return None

@router.message(Action.number)
async def action_number(message: Message, state: FSMContext):
    tg_id = message.from_user.id
    normalized = normalize_phone(message.text)

    if not normalized:
        await message.answer(
            "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n\n"
            "–î–æ–ø—É—Å—Ç–∏–º—ã–µ –ø—Ä–∏–º–µ—Ä—ã: <code>89182223455</code>, <code>+79284569475</code>, <code>+7-918-037-84-28</code>",
            parse_mode="HTML",
            reply_markup=back_kb()
        )
        return

    data = await state.get_data()
    first_name = data.get("first_name", "")
    last_name  = data.get("last_name", "")


    await add_personal_data(tg_id, first_name, last_name, normalized)

    await state.clear()

    kb_done = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üè† –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="profile")]]
    )
    await message.answer(
        f"üéâ –û—Ç–ª–∏—á–Ω–æ, {first_name}!\n\n"
        "–ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –≤ <b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b> –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å üöÄ",
        parse_mode="HTML",
        reply_markup=kb_done
    )



