import re

import uuid
from datetime import datetime

from typing import Union

from aiogram import Router, F, Bot
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message

from bot.db.crud.bike import get_bike_by_id
from bot.db.crud.debts import get_debts
from bot.db.crud.equips import get_equips_user
from bot.db.crud.mix_conn import get_user_and_data
from bot.db.crud.names import get_personal_data, add_personal_data
from bot.db.crud.payments.add_fail_status import fail_status
from bot.db.crud.payments.create_payment import create_payment
from bot.db.crud.payments.payments_user import get_user_payments, get_payment_by_id
from bot.db.crud.photos.map import get_map
from bot.db.crud.user import get_user
from cardlink._types import Bill, BillStatus
from bot.config import cl


router = Router()


@router.callback_query(F.data == 'profile')
async def profile(callback: CallbackQuery, state: FSMContext, bot: Bot):
    tg_id = callback.from_user.id

    data = await state.get_data()
    try:
        if data['msg_for_del']:
            await bot.delete_message(chat_id=tg_id, message_id=data['msg_for_del'])
    except KeyError:
        pass

    await state.clear()



    user, personal_data = await get_user_and_data(tg_id)

    if personal_data:
        name = f"{personal_data[-3]} {personal_data[-2]}" if personal_data[-3] else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    else:
        name = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"


    keyboard_rows = []

    if user[3] != 'null' and user[3] is not None:

        keyboard_rows.extend([
            [InlineKeyboardButton(text="üèçÔ∏è –ú–æ–π —Å–∫—É—Ç–µ—Ä", callback_data="my_scooter")],
            [InlineKeyboardButton(text="üó∫Ô∏è –ö–∞—Ä—Ç–∞ –≥—Ä–∞–Ω–∏—Ü", callback_data="city_map")],
            [
                InlineKeyboardButton(text="üõ°Ô∏è –≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞", callback_data="my_equips"),
                InlineKeyboardButton(text="üí∞ –î–æ–ª–≥–∏", callback_data="my_debts")
            ],
            [InlineKeyboardButton(text="üìä –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π", callback_data="history_my_payments")]
        ])

        if personal_data is None:
            keyboard_rows.append([InlineKeyboardButton(text="üìù –ê–Ω–∫–µ—Ç–∞", callback_data="action")])

    else:

        keyboard_rows.append([InlineKeyboardButton(text="üèçÔ∏è –ú–æ–π —Å–∫—É—Ç–µ—Ä", callback_data="my_scooter")])

        if personal_data is None:
            keyboard_rows.append([InlineKeyboardButton(text="üìù –ê–Ω–∫–µ—Ç–∞", callback_data="action")])


    keyboard_rows.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main")])

    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)


    profile_text = f"""
üë§ <b>–ú–û–ô –ü–†–û–§–ò–õ–¨</b>

üìã <b>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>

‚îú üîπ –ò–º—è: {name}
‚îî üîπ ID: <code>{tg_id}</code>

üíé <i>–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º–∏ –∞—Ä–µ–Ω–¥–∞–º–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏</i>
"""
    try:
        msg_for_del = await callback.message.edit_text(
            text=profile_text,
            parse_mode='HTML',
            reply_markup=keyboard
        )
    except TelegramBadRequest:
        msg_for_del = await callback.message.answer(
            text=profile_text,
            parse_mode='HTML',
            reply_markup=keyboard
        )

    await state.update_data(msg_for_del=msg_for_del.message_id)


class Action(StatesGroup):
    first_name = State()
    last_name = State()
    number = State()


NAME_RE = re.compile(r"^[A-Za-z–ê-–Ø–∞-—è–Å—ë\-]+$")

def back_kb():
    return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîÑ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞", callback_data="action")]])

def normalize_phone(raw: str) -> str | None:
    s = (raw or "").strip()
    s = s.replace("(", "").replace(")", "").replace(" ", "").replace("-", "")
    if s.startswith("+"):
        if s.startswith("+7") and s[1:].isdigit() and len(s) == 12:
            return s
        return None
    if s.isdigit():
        if s.startswith("8") and len(s) == 11:
            return "+7" + s[1:]
        if s.startswith("7") and len(s) == 11:
            return "+7" + s[1:]
    return None




@router.callback_query(lambda c: c.data == "action")
async def action_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Action.first_name)
    msg = await callback.message.edit_text(
        "–î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è! ‚úçÔ∏è\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ <b>–∏–º—è</b> (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã):",
        parse_mode="HTML"
    )
    await state.update_data(msg1=msg.message_id)


@router.message(Action.first_name)
async def action_fn(message: Message, state: FSMContext, bot: Bot):
    msg_text = (message.text or "").strip()
    if not NAME_RE.fullmatch(msg_text):
        await message.answer(
            "–ò–º—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –¥–µ—Ñ–∏—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:",
            reply_markup=back_kb()
        )
        return


    data = await state.get_data()
    tg_id = message.from_user.id
    msg_user1 = message.message_id


    await state.set_state(Action.last_name)
    msg2 = await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É <b>—Ñ–∞–º–∏–ª–∏—é</b> (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã):",
        parse_mode="HTML",
        reply_markup=back_kb()
    )
    await state.update_data(first_name=msg_text.capitalize(), msg2=msg2.message_id)


    try:
        await bot.delete_message(chat_id=tg_id, message_id=data['msg1'])
    except:
        pass
    try:
        await bot.delete_message(chat_id=tg_id, message_id=msg_user1)
    except:
        pass


@router.message(Action.last_name)
async def action_ln(message: Message, state: FSMContext, bot: Bot):
    msg_text = (message.text or "").strip()
    if not NAME_RE.fullmatch(msg_text):
        await message.answer(
            "–§–∞–º–∏–ª–∏—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –¥–µ—Ñ–∏—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:",
            reply_markup=back_kb()
        )
        return

    data = await state.get_data()
    tg_id = message.from_user.id
    msg_user2 = message.message_id


    await state.set_state(Action.number)
    msg3 = await message.answer(
        "–•–æ—Ä–æ—à–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>.\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã: <code>89182223455</code>, <code>+79284569475</code>, <code>+7-918-037-84-28</code>",
        parse_mode="HTML",
        reply_markup=back_kb()
    )
    await state.update_data(last_name=msg_text.capitalize(), msg3=msg3.message_id)


    try:
        await bot.delete_message(chat_id=tg_id, message_id=data['msg2'])
    except:
        pass
    try:
        await bot.delete_message(chat_id=tg_id, message_id=msg_user2)
    except:
        pass

# –í–≤–æ–¥ –Ω–æ–º–µ—Ä–∞
@router.message(Action.number)
async def action_number(message: Message, state: FSMContext, bot: Bot):
    tg_id = message.from_user.id
    normalized = normalize_phone(message.text)
    msg_user3 = message.message_id


    try:
        await bot.delete_message(chat_id=tg_id, message_id=msg_user3)
    except Exception as e:
        pass

    if not normalized:
        await message.answer(
            "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n\n"
            "–î–æ–ø—É—Å—Ç–∏–º—ã–µ –ø—Ä–∏–º–µ—Ä—ã: <code>89182223455</code>, <code>+79284569475</code>, <code>+7-918-037-84-28</code>",
            parse_mode="HTML",
            reply_markup=back_kb()
        )
        return

    data = await state.get_data()
    first_name = data.get("first_name", "")
    last_name  = data.get("last_name", "")

    await add_personal_data(tg_id, first_name, last_name, normalized)
    await state.clear()

    kb_done = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main")]]
    )

    await bot.delete_message(chat_id=tg_id, message_id=data['msg3'])
    await message.answer(
        f"üéâ –û—Ç–ª–∏—á–Ω–æ, {first_name} {last_name}!\n\n"
        "–ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –≤ <b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b> –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å üöÄ",
        parse_mode="HTML",
        reply_markup=kb_done
    )

@router.callback_query(F.data == 'city_map')
async def city_map(callback: CallbackQuery, bot: Bot, state: FSMContext):

    tg_id = callback.from_user.id

    msg_del = await state.get_data()

    await bot.delete_message(chat_id=tg_id, message_id=msg_del['msg_for_del'])

    file_id = await get_map()

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data=f'profile')
            ]
        ]
    )

    msg_for_del = await callback.message.answer_photo(photo=file_id, caption=(
        "üöß <b>–ì—Ä–∞–Ω–∏—Ü—ã –∑–æ–Ω—ã</b>\n"
        "‚ñ´Ô∏è –ó–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ - —Å–∫—É—Ç–µ—Ä –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è"
    ),
    parse_mode='HTML', reply_markup=keyboard)

    await state.clear()

    await state.update_data(msg_for_del=msg_for_del.message_id)


@router.callback_query(F.data == 'my_scooter')
async def my_scooter(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    tg_id = callback.from_user.id
    user = await get_user(tg_id)
    pd = await get_personal_data(tg_id)

    if user[3] is None or user[3] == 'null':

        if pd:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='üõµ –ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å —Å–∫—É—Ç–µ—Ä', callback_data='scooter')],
                [InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='profile')]
            ])
            await callback.message.edit_text(
                'üö´ <b>–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∞—Ä–µ–Ω–¥—ã</b>\n\n'
                'üí° –í—ã –º–æ–∂–µ—Ç–µ –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å —Å–∫—É—Ç–µ—Ä –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!',
                parse_mode='HTML',
                reply_markup=keyboard
            )
        else:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É', callback_data='action')],
                [InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='profile')]
            ])
            await callback.message.edit_text(
                'üìã <b>–ê–Ω–∫–µ—Ç–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞</b>\n\n'
                'üìù –î–ª—è –∞—Ä–µ–Ω–¥—ã —Å–∫—É—Ç–µ—Ä–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É',
                parse_mode='HTML',
                reply_markup=keyboard
            )

    else:

        bike = await get_bike_by_id(user[3])
        next_oil_change = f'{bike[4] + 3000}  –∫–º' if bike[4] else "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
        last_oil_change = f'{bike[4]}  –∫–º' or "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ –±–∞–π–∫', callback_data='documents')],
            [InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='profile')]
        ])

        await callback.message.edit_text(
            f'üèç <b>–í–ê–® –°–ö–£–¢–ï–†</b>\n\n'
            f'<code>‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê</code>\n'
            f'<b>‚îÇ</b> üèç <b>–ú–æ–¥–µ–ª—å:</b> {bike[2]}\n'
            f'<b>‚îÇ</b> üîß <b>–ó–∞–º–µ–Ω–∞ –º–∞—Å–ª–∞:</b> {last_oil_change}\n'
            f'<b>‚îÇ</b> ‚è∞ <b>–°–ª–µ–¥—É—é—â–∞—è –∑–∞–º–µ–Ω–∞:</b> {next_oil_change}\n'
            f'<code>‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îõ</code>\n\n'
            f'üí° <i>–£–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤–∞—à–µ–π –∞—Ä–µ–Ω–¥–æ–π</i>',
            parse_mode='HTML',
            reply_markup=keyboard
        )


@router.callback_query(F.data == 'my_equips')
async def my_equips(callback: CallbackQuery):
    tg_id = callback.from_user.id
    equips = await get_equips_user(tg_id)


    available_equips = []
    if equips[2]:
        available_equips.append("ü™ñ –®–ª–µ–º")
    if equips[3]:
        available_equips.append("‚õìÔ∏è –¶–µ–ø—å")
    if equips[4]:
        available_equips.append("üéí –°—É–º–∫–∞")
    if equips[5]:
        available_equips.append("üß≥ –ë–∞–≥–∞–∂–Ω–∏–∫")


    if available_equips:
        text = (
            "üõ°Ô∏è <b>–í–ê–®–ê –≠–ö–ò–ü–ò–†–û–í–ö–ê</b>\n\n"
            "‚úÖ <b>–î–æ—Å—Ç—É–ø–Ω–æ:</b>\n"
            f"{chr(10).join(['‚ñ´Ô∏è ' + item for item in available_equips])}\n\n"

        )
    else:
        text = (
            "üõ°Ô∏è <b>–í–ê–®–ê –≠–ö–ò–ü–ò–†–û–í–ö–ê</b>\n\n"
            "üö´ <i>–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏</i>\n\n"
            "üí° <i>–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É</i>"
        )

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="profile")]
        ]
    )

    await callback.message.edit_text(
        text=text,
        parse_mode='HTML',
        reply_markup=keyboard
    )


@router.callback_query(F.data == 'my_debts')
async def my_debts(callback: CallbackQuery):
    tg_id = callback.from_user.id
    debts = await get_debts(tg_id)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –¥–æ–ª–≥–∞–º–∏
    if debts:
        debts_text = "üìã <b>–í–∞—à–∏ –¥–æ–ª–≥–∏:</b>\n\n"
        total_debt = 0

        for debt in debts:
            tg_id, amount, description = debt[0], debt[1], debt[2]
            debts_text += f"‚Ä¢ {description}: <b>{amount} —Ä—É–±.</b>\n"
            total_debt += amount

        debts_text += f"\nüíµ <b>–û–±—â–∞—è —Å—É–º–º–∞ –¥–æ–ª–≥–∞: {total_debt} —Ä—É–±.</b>"
    else:
        debts_text = "‚úÖ <b>–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–ª–≥–æ–≤</b>"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard_buttons = []

    if debts:
        keyboard_buttons.append([
            InlineKeyboardButton(
                text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ–ª–≥–∏",
                callback_data="pay_debts-none"
            )
        ])

    keyboard_buttons.append([
        InlineKeyboardButton(
            text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
            callback_data="main"
        )
    ])

    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

    await callback.message.edit_text(
        text=debts_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()


class PayDebtStates(StatesGroup):
    waiting_for_debt_choice = State()


@router.callback_query(F.data.split('-')[0] == 'pay_debts')
async def pay_debts_start(callback: CallbackQuery, state: FSMContext):
    tg_id = callback.from_user.id
    debts = await get_debts(tg_id)
    data = callback.data.split('-')[1]

    if data != 'none':
        await fail_status(data)



    if not debts:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–ª–≥–æ–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã")
        return

    await state.set_state(PayDebtStates.waiting_for_debt_choice)
    await state.update_data(debts=debts)

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ–ª–≥–∞
    keyboard_buttons = []

    for i, debt in enumerate(debts):
        tg_id, amount, description = debt[0], debt[1], debt[2]
        keyboard_buttons.append([
            InlineKeyboardButton(
                text=f"üí≥ {description} - {amount} —Ä—É–±.",
                callback_data=f"select_debt_to_pay-{i}"  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å –¥–æ–ª–≥–∞
            )
        ])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    keyboard_buttons.append([
        InlineKeyboardButton(
            text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –¥–æ–ª–≥–∞–º",
            callback_data="my_debts"
        )
    ])

    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

    await callback.message.edit_text(
        text="üí≥ <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–≥ –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b>",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.split('-')[0] == 'select_debt_to_pay')
async def select_debt_to_pay(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        if 'debts' not in data:
            await callback.answer("‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
            return

        debt_index = int(callback.data.split('-')[1])
        debts = data['debts']

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω–¥–µ–∫—Å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        if debt_index >= len(debts):
            await callback.answer("‚ùå –î–æ–ª–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        selected_debt = debts[debt_index]
        tg_id, amount, description = selected_debt[0], selected_debt[1], selected_debt[2]

        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∂–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å",
                        callback_data=f"debt_pay-{amount}-{description}"
                    ),
                    InlineKeyboardButton(
                        text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
                        callback_data="pay_debts"
                    )
                ]
            ]
        )

        await callback.message.edit_text(
            text=f"üí≥ <b>–û–ø–ª–∞—Ç–∞ –¥–æ–ª–≥–∞:</b>\n\n"
                 f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n"
                 f"üíµ <b>–°—É–º–º–∞:</b> {amount} —Ä—É–±.\n\n"
                 f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer()

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ select_debt_to_pay: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –∫ –º–æ–∏–º –¥–æ–ª–≥–∞–º"
@router.callback_query(F.data == 'my_debts')
async def back_to_my_debts(callback: CallbackQuery, state: FSMContext):
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ
    await state.clear()

    tg_id = callback.from_user.id
    debts = await get_debts(tg_id)

    if debts:
        debts_text = "üìã <b>–í–∞—à–∏ –¥–æ–ª–≥–∏:</b>\n\n"
        total_debt = 0

        for debt in debts:
            tg_id, amount, description = debt[0], debt[1], debt[2]
            debts_text += f"‚Ä¢ {description}: <b>{amount} —Ä—É–±.</b>\n"
            total_debt += amount

        debts_text += f"\nüíµ <b>–û–±—â–∞—è —Å—É–º–º–∞ –¥–æ–ª–≥–∞: {total_debt} —Ä—É–±.</b>"
    else:
        debts_text = "‚úÖ <b>–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–ª–≥–æ–≤</b>"

    keyboard_buttons = []

    if debts:
        keyboard_buttons.append([
            InlineKeyboardButton(
                text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ–ª–≥–∏",
                callback_data="pay_debts"
            )
        ])

    keyboard_buttons.append([
        InlineKeyboardButton(
            text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
            callback_data="main"
        )
    ])

    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

    await callback.message.edit_text(
        text=debts_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.split('-')[0] == 'debt_pay')
async def debt_pay(callback: CallbackQuery):
    tg_id = callback.from_user.id
    amount = callback.data.split('-')[1]
    description = callback.data.split('-')[2]

    description_for_msg = '–î–æ–ª–≥: ' + description
    description_for_func = '–î–æ–ª–≥_' + description


    order_id = f'order-{uuid.uuid4().hex[:8]}-debt-{tg_id}'
    create_bill: Bill = await cl.create_bill(amount=int(amount), order_id=order_id, ttl=60 * 15)

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ–ª–≥", url=create_bill.link_page_url)],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f'pay_debts-{order_id}')]
        ]
    )

    msg = await callback.message.edit_text(
        text=(
            f"<code>‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê</code>\n"
            f"<b>  üí∞ –û–ü–õ–ê–¢–ê –î–û–õ–ì–ê  </b>\n"
            f"<code>‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§</code>\n"
            f"<b>‚îÇ</b> üìã {description_for_msg}\n"
            f"<b>‚îÇ</b> üíµ –°—É–º–º–∞: {amount} ‚ÇΩ\n"
            f"<code>‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§</code>\n"
            f"<b>‚îÇ</b> ‚è∞ 15 –º–∏–Ω—É—Ç\n"
            f"<code>‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îõ</code>\n\n"
            f"üí≥ <i>–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã</i>"
        ),
        parse_mode='HTML',
        reply_markup=keyboard
    )

    await create_payment(
        tg_id=tg_id,
        order_id=order_id,
        id_=create_bill.id,
        time=0,
        price=int(amount),
        message_id=msg.message_id,
        description=description_for_func,
        status='pending_debt'
    )


@router.callback_query(F.data == 'history_my_payments')
async def history_my_payments(callback: CallbackQuery, state: FSMContext):
    try:
        user_id = callback.from_user.id

        payments = await get_user_payments(user_id)

        if not payments:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")]
            ])

            await callback.message.edit_text(
                text="üì≠ <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π</b>",
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            return

        await state.update_data(payments=payments, current_page=0)
        await show_payments_page(callback, state)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ history_my_payments: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–ª–∞—Ç–µ–∂–µ–π")


async def show_payments_page(update: Union[Message, CallbackQuery], state: FSMContext):
    data = await state.get_data()
    payments = data.get('payments', [])
    current_page = data.get('current_page', 0)

    start_idx = current_page * 5
    end_idx = start_idx + 5
    current_payments = payments[start_idx:end_idx]

    keyboard_buttons = []

    for i, payment in enumerate(current_payments, start=start_idx + 1):
        description = payment[3]

        if description and description.startswith('–ê—Ä–µ–Ω–¥–∞ —Å–∫—É—Ç–µ—Ä–∞'):
            button_text = f"üèçÔ∏è –ê—Ä–µ–Ω–¥–∞ #{i}"
        elif description and description.startswith('–î–æ–ª–≥_'):
            button_text = f"üí∞ –î–æ–ª–≥ #{i}"
        else:
            button_text = f"üí≥ –ü–ª–∞—Ç–µ–∂ #{i}"

        keyboard_buttons.append([
            InlineKeyboardButton(
                text=button_text,
                callback_data=f"view_payment-{payment[0]}"
            )
        ])

    total_pages = (len(payments) + 4) // 5
    if total_pages > 1:
        nav_buttons = []
        if current_page > 0:
            nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data="payments_prev"))

        nav_buttons.append(InlineKeyboardButton(
            text=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1}/{total_pages}",
            callback_data="payments_page"
        ))

        if current_page < total_pages - 1:
            nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data="payments_next"))

        keyboard_buttons.append(nav_buttons)

    keyboard_buttons.append([
        InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="payments_stats")
    ])

    keyboard_buttons.append([
        InlineKeyboardButton(text="‚Ü©Ô∏è –í –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")
    ])

    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

    text = "üí≥ <b>–í–ê–®–ò –ü–õ–ê–¢–ï–ñ–ò</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:"

    if isinstance(update, CallbackQuery):
        await update.message.edit_text(text=text, reply_markup=keyboard, parse_mode="HTML")
    else:
        await update.answer(text=text, reply_markup=keyboard, parse_mode="HTML")


@router.callback_query(F.data == 'payments_prev')
async def payments_previous(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_page = data.get('current_page', 0)
    if current_page > 0:
        await state.update_data(current_page=current_page - 1)
        await show_payments_page(callback, state)
    await callback.answer()


@router.callback_query(F.data == 'payments_next')
async def payments_next(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    payments = data.get('payments', [])
    current_page = data.get('current_page', 0)
    total_pages = (len(payments) + 4) // 5
    if current_page < total_pages - 1:
        await state.update_data(current_page=current_page + 1)
        await show_payments_page(callback, state)
    await callback.answer()


@router.callback_query(F.data.split('-')[0] == 'view_payment')
async def view_payment_detail(callback: CallbackQuery):
    payment_id = int(callback.data.split('-')[1])

    payment = await get_payment_by_id(payment_id)
    if not payment:
        await callback.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    (id, user_id, order_id, bill_id, amount, currency, commission,
     status, created_at, updated_at, description, message_id, days, pledge) = payment

    created_str = datetime.fromisoformat(created_at).strftime('%d.%m.%Y %H:%M')
    updated_str = datetime.fromisoformat(updated_at).strftime('%d.%m.%Y %H:%M') if updated_at else "–ù–µ –æ–±–Ω–æ–≤–ª—è–ª—Å—è"

    if description and description.startswith('–ê—Ä–µ–Ω–¥–∞ —Å–∫—É—Ç–µ—Ä–∞'):
        payment_type = "üèçÔ∏è –ê—Ä–µ–Ω–¥–∞ —Å–∫—É—Ç–µ—Ä–∞"
    elif description and description.startswith('–î–æ–ª–≥_'):
        payment_type = "üí∞ –ü–æ–≥–∞—à–µ–Ω–∏–µ –¥–æ–ª–≥–∞"
        description = description.replace('_', ': ')
    else:
        payment_type = "üí≥ –ü–ª–∞—Ç–µ–∂"

    status_icons = {
        'success': '‚úÖ –£—Å–ø–µ—à–Ω–æ',
        'pending': '‚è≥ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
        'pending_debt': '‚è≥ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
        'fail': '‚ùå –û—à–∏–±–∫–∞',
        'expired': '‚åõÔ∏è –ò—Å—Ç–µ–∫'
    }
    status_text = status_icons.get(status, status)

    payment_text = f"""
{payment_type}

üí∞ <b>–°—É–º–º–∞:</b> {int(amount)} {currency}
üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}
üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}
üïê <b>–°–æ–∑–¥–∞–Ω:</b> {created_str}

üî¢ <b>–î–µ—Ç–∞–ª–∏:</b>
‚Ä¢ ID: <code>{id}</code>
‚Ä¢ Order ID: <code>{order_id}</code>
"""

    if days and pledge:
        payment_text += f"‚Ä¢ –î–Ω–µ–π –∞—Ä–µ–Ω–¥—ã: {days}\n‚Ä¢ –ó–∞–ª–æ–≥: {pledge} {currency}\n"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="history_my_payments")],
        [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main")]
    ])

    await callback.message.edit_text(
        text=payment_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == 'payments_stats')
async def payments_stats(callback: CallbackQuery):
    user_id = callback.from_user.id
    payments = await get_user_payments(user_id)

    if not payments:
        await callback.answer("üì≠ –ù–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        return

    total_spent = 0
    successful = 0
    pending = 0
    failed = 0
    expired = 0

    for payment in payments:
        amount, status = payment[4], payment[7]
        if status == 'success':
            total_spent += amount
            successful += 1
        elif status in ['pending', 'pending_debt']:
            pending += 1
        elif status == 'fail':
            failed += 1
        elif status == 'expired':
            expired += 1

    stats_text = f"""
üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–õ–ê–¢–ï–ñ–ï–ô</b>

üíµ <b>–í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ:</b> {total_spent} RUB
üìà <b>–£—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π:</b> {successful}
‚è≥ <b>–í –æ–±—Ä–∞–±–æ—Ç–∫–µ:</b> {pending}
‚ùå <b>–ù–µ—É–¥–∞—á–Ω—ã—Ö:</b> {failed}
‚åõÔ∏è <b>–ò—Å—Ç–µ–∫—à–∏—Ö:</b> {expired}
üìã <b>–í—Å–µ–≥–æ transactions:</b> {len(payments)}
"""

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –ø–ª–∞—Ç–µ–∂–∞–º", callback_data="history_my_payments")],
        [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main")]
    ])

    await callback.message.edit_text(
        text=stats_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()



