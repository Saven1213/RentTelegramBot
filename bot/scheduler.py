from aiogram import Bot

from datetime import datetime, timedelta
import aiosqlite
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiosqlite import connect

DB_PATH = "rent-bike.db"  # –ø—É—Ç—å –∫ –±–∞–∑–µ


async def check_rent_status(bot: Bot):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text='üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –∞—Ä–µ–Ω–¥—É', callback_data='extend'),
            InlineKeyboardButton(text='‚è≥ –û–ø–ª–∞—á—É –ø–æ–∑–∂–µ', callback_data='pay_later')
        ],
        [
            InlineKeyboardButton(text='‚ùå –ù–µ –ø—Ä–æ–¥–ª–µ–≤–∞—Ç—å', callback_data='cancel')
        ],
        [
            InlineKeyboardButton(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="t.me/hulkbike_support")
        ]
    ])

    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                "SELECT user_id, end_time, notified FROM rent_details WHERE status = 'active'"
            )
            rows = await cursor.fetchall()

        now_utc = datetime.utcnow()
        now_msk = now_utc + timedelta(hours=3)

        for user_id, end_time_str, notified in rows:
            if end_time_str:
                end_time_utc = datetime.fromisoformat(end_time_str)
                end_time_msk = end_time_utc + timedelta(hours=3)

                time_left = end_time_msk - now_msk

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ –∫–æ–Ω—Ü–∞ –∞—Ä–µ–Ω–¥—ã –æ—Å—Ç–∞–ª–æ—Å—å –æ—Ç 23 –¥–æ 24 —á–∞—Å–æ–≤
                # –ò —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å
                if timedelta(hours=23) <= time_left <= timedelta(hours=24) and notified == 0:
                    hours_left = int(time_left.total_seconds() // 3600)
                    minutes_left = int((time_left.total_seconds() % 3600) // 60)

                    await bot.send_message(
                        user_id,
                        f"‚è∞ <b>–ê–†–ï–ù–î–ê –ó–ê–ö–ê–ù–ß–ò–í–ê–ï–¢–°–Ø –ß–ï–†–ï–ó –î–ï–ù–¨!</b>\n\n"
                        f"üìÖ <b>–û–∫–æ–Ω—á–∞–Ω–∏–µ:</b> {end_time_msk.strftime('%d.%m.%Y %H:%M')} –ú–°–ö\n"
                        f"‚è≥ <b>–û—Å—Ç–∞–ª–æ—Å—å:</b> {hours_left}—á {minutes_left}–º\n\n"
                        f"üí° <i>–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –∞—Ä–µ–Ω–¥—É?</i>",
                        parse_mode='HTML',
                        reply_markup=keyboard
                    )

                    # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                    async with aiosqlite.connect(DB_PATH) as conn:
                        await conn.execute(
                            "UPDATE rent_details SET notified = 1 WHERE user_id = ? AND end_time = ?",
                            (user_id, end_time_str)
                        )
                        await conn.commit()

                    print(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ check_rent_status: {e}")


async def deactivate_expired_rents(bot: Bot):
    try:
        now_ = datetime.utcnow()

        async with aiosqlite.connect(DB_PATH) as db:
            cursor = await db.execute(
                "SELECT user_id, end_time FROM rent_details WHERE status = 'active'"
            )
            rows = await cursor.fetchall()

            for user_id, end_time_str in rows:
                if end_time_str:
                    end_time = datetime.fromisoformat(end_time_str)

                    if end_time <= now_:
                        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–∫—É—Ç–µ—Ä–∞ –î–û –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                        cursor_user = await db.execute(
                            "SELECT username, bike_id, bike_name FROM users WHERE tg_id = ?",
                            (user_id,)
                        )
                        user_result = await cursor_user.fetchone()
                        username = user_result[0] if user_result else f"user_{user_id}"
                        bike_id = user_result[1] if user_result else None
                        bike_name = user_result[2] if user_result else None

                        bike_info = f"{bike_name} #{bike_id}" if bike_id and bike_name else "–Ω–µ —É–∫–∞–∑–∞–Ω"

                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã (—Ç–µ–ø–µ—Ä—å –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö)
                        await db.execute(
                            "UPDATE rent_details SET status = 'unactive' WHERE user_id = ? AND end_time = ?",
                            (user_id, end_time_str)
                        )
                        await db.execute(
                            "UPDATE users SET bike_id = NULL, bike_name = NULL WHERE tg_id = ?",
                            (user_id,)
                        )
                        await db.execute(
                            "UPDATE bikes SET user = NULL, is_free = 1 WHERE user = ?",
                            (user_id,)
                        )

                        # –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–æ–≤
                        cursor_admins = await db.execute(
                            "SELECT tg_id FROM users WHERE admin = 'admin' OR admin = 'moderator'"
                        )
                        admins = await cursor_admins.fetchall()

                        await db.commit()

                        # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        end_time_msk = end_time + timedelta(hours=3)
                        keyboard = InlineKeyboardMarkup(inline_keyboard=[
                            [
                                InlineKeyboardButton(text="‚úÖ –°–¥–∞–ª —Å–∫—É—Ç–µ—Ä", callback_data="return_bike"),
                                InlineKeyboardButton(text="üìç –ì–¥–µ –±–∞–∑–∞?",
                                                     url="https://maps.yandex.ru/?text=–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä, –ö–æ—Ä–Ω–∏—Ü–∫–æ–≥–æ 47")
                            ],
                            [
                                InlineKeyboardButton(text='üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main')
                            ]
                        ])

                        await bot.send_message(
                            user_id,
                            f"‚õî **–ê—Ä–µ–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
                            f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: **{end_time_msk.strftime('%Y-%m-%d %H:%M –ú–°–ö')}**\n\n"
                            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–∞–π—Ç–µ —Å–∫—É—Ç–µ—Ä –Ω–∞ –±–∞–∑—É. üö≤",
                            parse_mode="Markdown",
                            reply_markup=keyboard
                        )

                        # –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
                        for admin_tuple in admins:
                            admin_id = admin_tuple[0]
                            try:
                                await bot.send_message(
                                    admin_id,
                                    f"<code>‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê</code>\n"
                                    f"<b>  üèÅ –ê–†–ï–ù–î–ê –ó–ê–í–ï–†–®–ï–ù–ê  </b>\n"
                                    f"<code>‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§</code>\n"
                                    f"<b>‚îÇ</b> üë§ @{username}\n"
                                    f"<b>‚îÇ</b> üî¢ <code>{user_id}</code>\n"
                                    f"<b>‚îÇ</b> üèç {bike_info}\n"
                                    f"<b>‚îÇ</b> ‚è∞ {end_time_msk.strftime('%d.%m %H:%M')}\n"
                                    f"<code>‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îõ</code>",
                                    parse_mode='HTML'
                                )
                            except Exception as e:
                                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ deactivate_expired_rents: {e}")


async def delete_old_history():
    try:

        three_months_ago = datetime.utcnow() - timedelta(days=90)

        async with aiosqlite.connect(DB_PATH) as conn:

            await conn.execute(
                "DELETE FROM rent_details WHERE end_time < ?",
                (three_months_ago.isoformat(),)
            )
            await conn.commit()


            cursor = await conn.execute("SELECT changes()")
            deleted_count = await cursor.fetchone()

            print(f"–£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –∞—Ä–µ–Ω–¥: {deleted_count[0] if deleted_count else 0}")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")